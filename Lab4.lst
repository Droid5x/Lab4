                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                                      4 ; This file was generated Thu Oct 30 14:42:31 2014
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab4
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _PCA_ISR
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _abs
                                     20 	.globl _vsprintf
                                     21 	.globl _printf
                                     22 	.globl _SS_range
                                     23 	.globl _SS_steer
                                     24 	.globl _BUS_SCL
                                     25 	.globl _BUS_TOE
                                     26 	.globl _BUS_FTE
                                     27 	.globl _BUS_AA
                                     28 	.globl _BUS_INT
                                     29 	.globl _BUS_STOP
                                     30 	.globl _BUS_START
                                     31 	.globl _BUS_EN
                                     32 	.globl _BUS_BUSY
                                     33 	.globl _SPIF
                                     34 	.globl _WCOL
                                     35 	.globl _MODF
                                     36 	.globl _RXOVRN
                                     37 	.globl _TXBSY
                                     38 	.globl _SLVSEL
                                     39 	.globl _MSTEN
                                     40 	.globl _SPIEN
                                     41 	.globl _AD0EN
                                     42 	.globl _ADCEN
                                     43 	.globl _AD0TM
                                     44 	.globl _ADCTM
                                     45 	.globl _AD0INT
                                     46 	.globl _ADCINT
                                     47 	.globl _AD0BUSY
                                     48 	.globl _ADBUSY
                                     49 	.globl _AD0CM1
                                     50 	.globl _ADSTM1
                                     51 	.globl _AD0CM0
                                     52 	.globl _ADSTM0
                                     53 	.globl _AD0WINT
                                     54 	.globl _ADWINT
                                     55 	.globl _AD0LJST
                                     56 	.globl _ADLJST
                                     57 	.globl _CF
                                     58 	.globl _CR
                                     59 	.globl _CCF4
                                     60 	.globl _CCF3
                                     61 	.globl _CCF2
                                     62 	.globl _CCF1
                                     63 	.globl _CCF0
                                     64 	.globl _CY
                                     65 	.globl _AC
                                     66 	.globl _F0
                                     67 	.globl _RS1
                                     68 	.globl _RS0
                                     69 	.globl _OV
                                     70 	.globl _F1
                                     71 	.globl _P
                                     72 	.globl _TF2
                                     73 	.globl _EXF2
                                     74 	.globl _RCLK
                                     75 	.globl _TCLK
                                     76 	.globl _EXEN2
                                     77 	.globl _TR2
                                     78 	.globl _CT2
                                     79 	.globl _CPRL2
                                     80 	.globl _BUSY
                                     81 	.globl _ENSMB
                                     82 	.globl _STA
                                     83 	.globl _STO
                                     84 	.globl _SI
                                     85 	.globl _AA
                                     86 	.globl _SMBFTE
                                     87 	.globl _SMBTOE
                                     88 	.globl _PT2
                                     89 	.globl _PS
                                     90 	.globl _PS0
                                     91 	.globl _PT1
                                     92 	.globl _PX1
                                     93 	.globl _PT0
                                     94 	.globl _PX0
                                     95 	.globl _P3_7
                                     96 	.globl _P3_6
                                     97 	.globl _P3_5
                                     98 	.globl _P3_4
                                     99 	.globl _P3_3
                                    100 	.globl _P3_2
                                    101 	.globl _P3_1
                                    102 	.globl _P3_0
                                    103 	.globl _EA
                                    104 	.globl _ET2
                                    105 	.globl _ES
                                    106 	.globl _ES0
                                    107 	.globl _ET1
                                    108 	.globl _EX1
                                    109 	.globl _ET0
                                    110 	.globl _EX0
                                    111 	.globl _P2_7
                                    112 	.globl _P2_6
                                    113 	.globl _P2_5
                                    114 	.globl _P2_4
                                    115 	.globl _P2_3
                                    116 	.globl _P2_2
                                    117 	.globl _P2_1
                                    118 	.globl _P2_0
                                    119 	.globl _S0MODE
                                    120 	.globl _SM00
                                    121 	.globl _SM0
                                    122 	.globl _SM10
                                    123 	.globl _SM1
                                    124 	.globl _MCE0
                                    125 	.globl _SM20
                                    126 	.globl _SM2
                                    127 	.globl _REN0
                                    128 	.globl _REN
                                    129 	.globl _TB80
                                    130 	.globl _TB8
                                    131 	.globl _RB80
                                    132 	.globl _RB8
                                    133 	.globl _TI0
                                    134 	.globl _TI
                                    135 	.globl _RI0
                                    136 	.globl _RI
                                    137 	.globl _P1_7
                                    138 	.globl _P1_6
                                    139 	.globl _P1_5
                                    140 	.globl _P1_4
                                    141 	.globl _P1_3
                                    142 	.globl _P1_2
                                    143 	.globl _P1_1
                                    144 	.globl _P1_0
                                    145 	.globl _TF1
                                    146 	.globl _TR1
                                    147 	.globl _TF0
                                    148 	.globl _TR0
                                    149 	.globl _IE1
                                    150 	.globl _IT1
                                    151 	.globl _IE0
                                    152 	.globl _IT0
                                    153 	.globl _P0_7
                                    154 	.globl _P0_6
                                    155 	.globl _P0_5
                                    156 	.globl _P0_4
                                    157 	.globl _P0_3
                                    158 	.globl _P0_2
                                    159 	.globl _P0_1
                                    160 	.globl _P0_0
                                    161 	.globl _PCA0CP4
                                    162 	.globl _PCA0CP3
                                    163 	.globl _PCA0CP2
                                    164 	.globl _PCA0CP1
                                    165 	.globl _PCA0CP0
                                    166 	.globl _PCA0
                                    167 	.globl _DAC1
                                    168 	.globl _DAC0
                                    169 	.globl _ADC0LT
                                    170 	.globl _ADC0GT
                                    171 	.globl _ADC0
                                    172 	.globl _RCAP4
                                    173 	.globl _TMR4
                                    174 	.globl _TMR3RL
                                    175 	.globl _TMR3
                                    176 	.globl _RCAP2
                                    177 	.globl _TMR2
                                    178 	.globl _TMR1
                                    179 	.globl _TMR0
                                    180 	.globl _WDTCN
                                    181 	.globl _PCA0CPH4
                                    182 	.globl _PCA0CPH3
                                    183 	.globl _PCA0CPH2
                                    184 	.globl _PCA0CPH1
                                    185 	.globl _PCA0CPH0
                                    186 	.globl _PCA0H
                                    187 	.globl _SPI0CN
                                    188 	.globl _EIP2
                                    189 	.globl _EIP1
                                    190 	.globl _TH4
                                    191 	.globl _TL4
                                    192 	.globl _SADDR1
                                    193 	.globl _SBUF1
                                    194 	.globl _SCON1
                                    195 	.globl _B
                                    196 	.globl _RSTSRC
                                    197 	.globl _PCA0CPL4
                                    198 	.globl _PCA0CPL3
                                    199 	.globl _PCA0CPL2
                                    200 	.globl _PCA0CPL1
                                    201 	.globl _PCA0CPL0
                                    202 	.globl _PCA0L
                                    203 	.globl _ADC0CN
                                    204 	.globl _EIE2
                                    205 	.globl _EIE1
                                    206 	.globl _RCAP4H
                                    207 	.globl _RCAP4L
                                    208 	.globl _XBR2
                                    209 	.globl _XBR1
                                    210 	.globl _XBR0
                                    211 	.globl _ACC
                                    212 	.globl _PCA0CPM4
                                    213 	.globl _PCA0CPM3
                                    214 	.globl _PCA0CPM2
                                    215 	.globl _PCA0CPM1
                                    216 	.globl _PCA0CPM0
                                    217 	.globl _PCA0MD
                                    218 	.globl _PCA0CN
                                    219 	.globl _DAC1CN
                                    220 	.globl _DAC1H
                                    221 	.globl _DAC1L
                                    222 	.globl _DAC0CN
                                    223 	.globl _DAC0H
                                    224 	.globl _DAC0L
                                    225 	.globl _REF0CN
                                    226 	.globl _PSW
                                    227 	.globl _SMB0CR
                                    228 	.globl _TH2
                                    229 	.globl _TL2
                                    230 	.globl _RCAP2H
                                    231 	.globl _RCAP2L
                                    232 	.globl _T4CON
                                    233 	.globl _T2CON
                                    234 	.globl _ADC0LTH
                                    235 	.globl _ADC0LTL
                                    236 	.globl _ADC0GTH
                                    237 	.globl _ADC0GTL
                                    238 	.globl _SMB0ADR
                                    239 	.globl _SMB0DAT
                                    240 	.globl _SMB0STA
                                    241 	.globl _SMB0CN
                                    242 	.globl _ADC0H
                                    243 	.globl _ADC0L
                                    244 	.globl _P1MDIN
                                    245 	.globl _ADC0CF
                                    246 	.globl _AMX0SL
                                    247 	.globl _AMX0CF
                                    248 	.globl _SADEN0
                                    249 	.globl _IP
                                    250 	.globl _FLACL
                                    251 	.globl _FLSCL
                                    252 	.globl _P74OUT
                                    253 	.globl _OSCICN
                                    254 	.globl _OSCXCN
                                    255 	.globl _P3
                                    256 	.globl __XPAGE
                                    257 	.globl _EMI0CN
                                    258 	.globl _SADEN1
                                    259 	.globl _P3IF
                                    260 	.globl _AMX1SL
                                    261 	.globl _ADC1CF
                                    262 	.globl _ADC1CN
                                    263 	.globl _SADDR0
                                    264 	.globl _IE
                                    265 	.globl _P3MDOUT
                                    266 	.globl _PRT3CF
                                    267 	.globl _P2MDOUT
                                    268 	.globl _PRT2CF
                                    269 	.globl _P1MDOUT
                                    270 	.globl _PRT1CF
                                    271 	.globl _P0MDOUT
                                    272 	.globl _PRT0CF
                                    273 	.globl _EMI0CF
                                    274 	.globl _EMI0TC
                                    275 	.globl _P2
                                    276 	.globl _CPT1CN
                                    277 	.globl _CPT0CN
                                    278 	.globl _SPI0CKR
                                    279 	.globl _ADC1
                                    280 	.globl _SPI0DAT
                                    281 	.globl _SPI0CFG
                                    282 	.globl _SBUF0
                                    283 	.globl _SBUF
                                    284 	.globl _SCON0
                                    285 	.globl _SCON
                                    286 	.globl _P7
                                    287 	.globl _TMR3H
                                    288 	.globl _TMR3L
                                    289 	.globl _TMR3RLH
                                    290 	.globl _TMR3RLL
                                    291 	.globl _TMR3CN
                                    292 	.globl _P1
                                    293 	.globl _PSCTL
                                    294 	.globl _CKCON
                                    295 	.globl _TH1
                                    296 	.globl _TH0
                                    297 	.globl _TL1
                                    298 	.globl _TL0
                                    299 	.globl _TMOD
                                    300 	.globl _TCON
                                    301 	.globl _PCON
                                    302 	.globl _P6
                                    303 	.globl _P5
                                    304 	.globl _P4
                                    305 	.globl _DPH
                                    306 	.globl _DPL
                                    307 	.globl _SP
                                    308 	.globl _P0
                                    309 	.globl _motor_PW
                                    310 	.globl _addr
                                    311 	.globl _Data
                                    312 	.globl _range_val
                                    313 	.globl _rWait
                                    314 	.globl _getRange
                                    315 	.globl _c
                                    316 	.globl _MOTOR_PW
                                    317 	.globl _final
                                    318 	.globl _heading
                                    319 	.globl _servo_PW
                                    320 	.globl _servo_PW_MAX
                                    321 	.globl _servo_PW_MIN
                                    322 	.globl _servo_PW_CENTER
                                    323 	.globl _reading
                                    324 	.globl _take_heading
                                    325 	.globl _interrupts
                                    326 	.globl _i2c_read_data_PARM_4
                                    327 	.globl _i2c_read_data_PARM_3
                                    328 	.globl _i2c_read_data_PARM_2
                                    329 	.globl _i2c_write_data_PARM_4
                                    330 	.globl _i2c_write_data_PARM_3
                                    331 	.globl _i2c_write_data_PARM_2
                                    332 	.globl _putchar
                                    333 	.globl _getchar
                                    334 	.globl _lcd_print
                                    335 	.globl _lcd_clear
                                    336 	.globl _kpd_input
                                    337 	.globl _delay_time
                                    338 	.globl _i2c_start
                                    339 	.globl _i2c_write
                                    340 	.globl _i2c_write_and_stop
                                    341 	.globl _i2c_read
                                    342 	.globl _i2c_read_and_stop
                                    343 	.globl _i2c_write_data
                                    344 	.globl _i2c_read_data
                                    345 	.globl _Accel_Init
                                    346 	.globl _Read_Compass
                                    347 	.globl _Drive_Motor
                                    348 	.globl _read_ranger
                                    349 	.globl _Port_Init
                                    350 	.globl _ADC_Init
                                    351 	.globl _read_AD_input
                                    352 	.globl _PCA_Init
                                    353 	.globl _Interrupt_Init
                                    354 	.globl _SMB_Init
                                    355 	.globl _Steering_Servo
                                    356 ;--------------------------------------------------------
                                    357 ; special function registers
                                    358 ;--------------------------------------------------------
                                    359 	.area RSEG    (ABS,DATA)
      000000                        360 	.org 0x0000
                           000080   361 G$P0$0$0 == 0x0080
                           000080   362 _P0	=	0x0080
                           000081   363 G$SP$0$0 == 0x0081
                           000081   364 _SP	=	0x0081
                           000082   365 G$DPL$0$0 == 0x0082
                           000082   366 _DPL	=	0x0082
                           000083   367 G$DPH$0$0 == 0x0083
                           000083   368 _DPH	=	0x0083
                           000084   369 G$P4$0$0 == 0x0084
                           000084   370 _P4	=	0x0084
                           000085   371 G$P5$0$0 == 0x0085
                           000085   372 _P5	=	0x0085
                           000086   373 G$P6$0$0 == 0x0086
                           000086   374 _P6	=	0x0086
                           000087   375 G$PCON$0$0 == 0x0087
                           000087   376 _PCON	=	0x0087
                           000088   377 G$TCON$0$0 == 0x0088
                           000088   378 _TCON	=	0x0088
                           000089   379 G$TMOD$0$0 == 0x0089
                           000089   380 _TMOD	=	0x0089
                           00008A   381 G$TL0$0$0 == 0x008a
                           00008A   382 _TL0	=	0x008a
                           00008B   383 G$TL1$0$0 == 0x008b
                           00008B   384 _TL1	=	0x008b
                           00008C   385 G$TH0$0$0 == 0x008c
                           00008C   386 _TH0	=	0x008c
                           00008D   387 G$TH1$0$0 == 0x008d
                           00008D   388 _TH1	=	0x008d
                           00008E   389 G$CKCON$0$0 == 0x008e
                           00008E   390 _CKCON	=	0x008e
                           00008F   391 G$PSCTL$0$0 == 0x008f
                           00008F   392 _PSCTL	=	0x008f
                           000090   393 G$P1$0$0 == 0x0090
                           000090   394 _P1	=	0x0090
                           000091   395 G$TMR3CN$0$0 == 0x0091
                           000091   396 _TMR3CN	=	0x0091
                           000092   397 G$TMR3RLL$0$0 == 0x0092
                           000092   398 _TMR3RLL	=	0x0092
                           000093   399 G$TMR3RLH$0$0 == 0x0093
                           000093   400 _TMR3RLH	=	0x0093
                           000094   401 G$TMR3L$0$0 == 0x0094
                           000094   402 _TMR3L	=	0x0094
                           000095   403 G$TMR3H$0$0 == 0x0095
                           000095   404 _TMR3H	=	0x0095
                           000096   405 G$P7$0$0 == 0x0096
                           000096   406 _P7	=	0x0096
                           000098   407 G$SCON$0$0 == 0x0098
                           000098   408 _SCON	=	0x0098
                           000098   409 G$SCON0$0$0 == 0x0098
                           000098   410 _SCON0	=	0x0098
                           000099   411 G$SBUF$0$0 == 0x0099
                           000099   412 _SBUF	=	0x0099
                           000099   413 G$SBUF0$0$0 == 0x0099
                           000099   414 _SBUF0	=	0x0099
                           00009A   415 G$SPI0CFG$0$0 == 0x009a
                           00009A   416 _SPI0CFG	=	0x009a
                           00009B   417 G$SPI0DAT$0$0 == 0x009b
                           00009B   418 _SPI0DAT	=	0x009b
                           00009C   419 G$ADC1$0$0 == 0x009c
                           00009C   420 _ADC1	=	0x009c
                           00009D   421 G$SPI0CKR$0$0 == 0x009d
                           00009D   422 _SPI0CKR	=	0x009d
                           00009E   423 G$CPT0CN$0$0 == 0x009e
                           00009E   424 _CPT0CN	=	0x009e
                           00009F   425 G$CPT1CN$0$0 == 0x009f
                           00009F   426 _CPT1CN	=	0x009f
                           0000A0   427 G$P2$0$0 == 0x00a0
                           0000A0   428 _P2	=	0x00a0
                           0000A1   429 G$EMI0TC$0$0 == 0x00a1
                           0000A1   430 _EMI0TC	=	0x00a1
                           0000A3   431 G$EMI0CF$0$0 == 0x00a3
                           0000A3   432 _EMI0CF	=	0x00a3
                           0000A4   433 G$PRT0CF$0$0 == 0x00a4
                           0000A4   434 _PRT0CF	=	0x00a4
                           0000A4   435 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   436 _P0MDOUT	=	0x00a4
                           0000A5   437 G$PRT1CF$0$0 == 0x00a5
                           0000A5   438 _PRT1CF	=	0x00a5
                           0000A5   439 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   440 _P1MDOUT	=	0x00a5
                           0000A6   441 G$PRT2CF$0$0 == 0x00a6
                           0000A6   442 _PRT2CF	=	0x00a6
                           0000A6   443 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   444 _P2MDOUT	=	0x00a6
                           0000A7   445 G$PRT3CF$0$0 == 0x00a7
                           0000A7   446 _PRT3CF	=	0x00a7
                           0000A7   447 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   448 _P3MDOUT	=	0x00a7
                           0000A8   449 G$IE$0$0 == 0x00a8
                           0000A8   450 _IE	=	0x00a8
                           0000A9   451 G$SADDR0$0$0 == 0x00a9
                           0000A9   452 _SADDR0	=	0x00a9
                           0000AA   453 G$ADC1CN$0$0 == 0x00aa
                           0000AA   454 _ADC1CN	=	0x00aa
                           0000AB   455 G$ADC1CF$0$0 == 0x00ab
                           0000AB   456 _ADC1CF	=	0x00ab
                           0000AC   457 G$AMX1SL$0$0 == 0x00ac
                           0000AC   458 _AMX1SL	=	0x00ac
                           0000AD   459 G$P3IF$0$0 == 0x00ad
                           0000AD   460 _P3IF	=	0x00ad
                           0000AE   461 G$SADEN1$0$0 == 0x00ae
                           0000AE   462 _SADEN1	=	0x00ae
                           0000AF   463 G$EMI0CN$0$0 == 0x00af
                           0000AF   464 _EMI0CN	=	0x00af
                           0000AF   465 G$_XPAGE$0$0 == 0x00af
                           0000AF   466 __XPAGE	=	0x00af
                           0000B0   467 G$P3$0$0 == 0x00b0
                           0000B0   468 _P3	=	0x00b0
                           0000B1   469 G$OSCXCN$0$0 == 0x00b1
                           0000B1   470 _OSCXCN	=	0x00b1
                           0000B2   471 G$OSCICN$0$0 == 0x00b2
                           0000B2   472 _OSCICN	=	0x00b2
                           0000B5   473 G$P74OUT$0$0 == 0x00b5
                           0000B5   474 _P74OUT	=	0x00b5
                           0000B6   475 G$FLSCL$0$0 == 0x00b6
                           0000B6   476 _FLSCL	=	0x00b6
                           0000B7   477 G$FLACL$0$0 == 0x00b7
                           0000B7   478 _FLACL	=	0x00b7
                           0000B8   479 G$IP$0$0 == 0x00b8
                           0000B8   480 _IP	=	0x00b8
                           0000B9   481 G$SADEN0$0$0 == 0x00b9
                           0000B9   482 _SADEN0	=	0x00b9
                           0000BA   483 G$AMX0CF$0$0 == 0x00ba
                           0000BA   484 _AMX0CF	=	0x00ba
                           0000BB   485 G$AMX0SL$0$0 == 0x00bb
                           0000BB   486 _AMX0SL	=	0x00bb
                           0000BC   487 G$ADC0CF$0$0 == 0x00bc
                           0000BC   488 _ADC0CF	=	0x00bc
                           0000BD   489 G$P1MDIN$0$0 == 0x00bd
                           0000BD   490 _P1MDIN	=	0x00bd
                           0000BE   491 G$ADC0L$0$0 == 0x00be
                           0000BE   492 _ADC0L	=	0x00be
                           0000BF   493 G$ADC0H$0$0 == 0x00bf
                           0000BF   494 _ADC0H	=	0x00bf
                           0000C0   495 G$SMB0CN$0$0 == 0x00c0
                           0000C0   496 _SMB0CN	=	0x00c0
                           0000C1   497 G$SMB0STA$0$0 == 0x00c1
                           0000C1   498 _SMB0STA	=	0x00c1
                           0000C2   499 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   500 _SMB0DAT	=	0x00c2
                           0000C3   501 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   502 _SMB0ADR	=	0x00c3
                           0000C4   503 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   504 _ADC0GTL	=	0x00c4
                           0000C5   505 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   506 _ADC0GTH	=	0x00c5
                           0000C6   507 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   508 _ADC0LTL	=	0x00c6
                           0000C7   509 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   510 _ADC0LTH	=	0x00c7
                           0000C8   511 G$T2CON$0$0 == 0x00c8
                           0000C8   512 _T2CON	=	0x00c8
                           0000C9   513 G$T4CON$0$0 == 0x00c9
                           0000C9   514 _T4CON	=	0x00c9
                           0000CA   515 G$RCAP2L$0$0 == 0x00ca
                           0000CA   516 _RCAP2L	=	0x00ca
                           0000CB   517 G$RCAP2H$0$0 == 0x00cb
                           0000CB   518 _RCAP2H	=	0x00cb
                           0000CC   519 G$TL2$0$0 == 0x00cc
                           0000CC   520 _TL2	=	0x00cc
                           0000CD   521 G$TH2$0$0 == 0x00cd
                           0000CD   522 _TH2	=	0x00cd
                           0000CF   523 G$SMB0CR$0$0 == 0x00cf
                           0000CF   524 _SMB0CR	=	0x00cf
                           0000D0   525 G$PSW$0$0 == 0x00d0
                           0000D0   526 _PSW	=	0x00d0
                           0000D1   527 G$REF0CN$0$0 == 0x00d1
                           0000D1   528 _REF0CN	=	0x00d1
                           0000D2   529 G$DAC0L$0$0 == 0x00d2
                           0000D2   530 _DAC0L	=	0x00d2
                           0000D3   531 G$DAC0H$0$0 == 0x00d3
                           0000D3   532 _DAC0H	=	0x00d3
                           0000D4   533 G$DAC0CN$0$0 == 0x00d4
                           0000D4   534 _DAC0CN	=	0x00d4
                           0000D5   535 G$DAC1L$0$0 == 0x00d5
                           0000D5   536 _DAC1L	=	0x00d5
                           0000D6   537 G$DAC1H$0$0 == 0x00d6
                           0000D6   538 _DAC1H	=	0x00d6
                           0000D7   539 G$DAC1CN$0$0 == 0x00d7
                           0000D7   540 _DAC1CN	=	0x00d7
                           0000D8   541 G$PCA0CN$0$0 == 0x00d8
                           0000D8   542 _PCA0CN	=	0x00d8
                           0000D9   543 G$PCA0MD$0$0 == 0x00d9
                           0000D9   544 _PCA0MD	=	0x00d9
                           0000DA   545 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   546 _PCA0CPM0	=	0x00da
                           0000DB   547 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   548 _PCA0CPM1	=	0x00db
                           0000DC   549 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   550 _PCA0CPM2	=	0x00dc
                           0000DD   551 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   552 _PCA0CPM3	=	0x00dd
                           0000DE   553 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   554 _PCA0CPM4	=	0x00de
                           0000E0   555 G$ACC$0$0 == 0x00e0
                           0000E0   556 _ACC	=	0x00e0
                           0000E1   557 G$XBR0$0$0 == 0x00e1
                           0000E1   558 _XBR0	=	0x00e1
                           0000E2   559 G$XBR1$0$0 == 0x00e2
                           0000E2   560 _XBR1	=	0x00e2
                           0000E3   561 G$XBR2$0$0 == 0x00e3
                           0000E3   562 _XBR2	=	0x00e3
                           0000E4   563 G$RCAP4L$0$0 == 0x00e4
                           0000E4   564 _RCAP4L	=	0x00e4
                           0000E5   565 G$RCAP4H$0$0 == 0x00e5
                           0000E5   566 _RCAP4H	=	0x00e5
                           0000E6   567 G$EIE1$0$0 == 0x00e6
                           0000E6   568 _EIE1	=	0x00e6
                           0000E7   569 G$EIE2$0$0 == 0x00e7
                           0000E7   570 _EIE2	=	0x00e7
                           0000E8   571 G$ADC0CN$0$0 == 0x00e8
                           0000E8   572 _ADC0CN	=	0x00e8
                           0000E9   573 G$PCA0L$0$0 == 0x00e9
                           0000E9   574 _PCA0L	=	0x00e9
                           0000EA   575 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   576 _PCA0CPL0	=	0x00ea
                           0000EB   577 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   578 _PCA0CPL1	=	0x00eb
                           0000EC   579 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   580 _PCA0CPL2	=	0x00ec
                           0000ED   581 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   582 _PCA0CPL3	=	0x00ed
                           0000EE   583 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   584 _PCA0CPL4	=	0x00ee
                           0000EF   585 G$RSTSRC$0$0 == 0x00ef
                           0000EF   586 _RSTSRC	=	0x00ef
                           0000F0   587 G$B$0$0 == 0x00f0
                           0000F0   588 _B	=	0x00f0
                           0000F1   589 G$SCON1$0$0 == 0x00f1
                           0000F1   590 _SCON1	=	0x00f1
                           0000F2   591 G$SBUF1$0$0 == 0x00f2
                           0000F2   592 _SBUF1	=	0x00f2
                           0000F3   593 G$SADDR1$0$0 == 0x00f3
                           0000F3   594 _SADDR1	=	0x00f3
                           0000F4   595 G$TL4$0$0 == 0x00f4
                           0000F4   596 _TL4	=	0x00f4
                           0000F5   597 G$TH4$0$0 == 0x00f5
                           0000F5   598 _TH4	=	0x00f5
                           0000F6   599 G$EIP1$0$0 == 0x00f6
                           0000F6   600 _EIP1	=	0x00f6
                           0000F7   601 G$EIP2$0$0 == 0x00f7
                           0000F7   602 _EIP2	=	0x00f7
                           0000F8   603 G$SPI0CN$0$0 == 0x00f8
                           0000F8   604 _SPI0CN	=	0x00f8
                           0000F9   605 G$PCA0H$0$0 == 0x00f9
                           0000F9   606 _PCA0H	=	0x00f9
                           0000FA   607 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   608 _PCA0CPH0	=	0x00fa
                           0000FB   609 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   610 _PCA0CPH1	=	0x00fb
                           0000FC   611 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   612 _PCA0CPH2	=	0x00fc
                           0000FD   613 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   614 _PCA0CPH3	=	0x00fd
                           0000FE   615 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   616 _PCA0CPH4	=	0x00fe
                           0000FF   617 G$WDTCN$0$0 == 0x00ff
                           0000FF   618 _WDTCN	=	0x00ff
                           008C8A   619 G$TMR0$0$0 == 0x8c8a
                           008C8A   620 _TMR0	=	0x8c8a
                           008D8B   621 G$TMR1$0$0 == 0x8d8b
                           008D8B   622 _TMR1	=	0x8d8b
                           00CDCC   623 G$TMR2$0$0 == 0xcdcc
                           00CDCC   624 _TMR2	=	0xcdcc
                           00CBCA   625 G$RCAP2$0$0 == 0xcbca
                           00CBCA   626 _RCAP2	=	0xcbca
                           009594   627 G$TMR3$0$0 == 0x9594
                           009594   628 _TMR3	=	0x9594
                           009392   629 G$TMR3RL$0$0 == 0x9392
                           009392   630 _TMR3RL	=	0x9392
                           00F5F4   631 G$TMR4$0$0 == 0xf5f4
                           00F5F4   632 _TMR4	=	0xf5f4
                           00E5E4   633 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   634 _RCAP4	=	0xe5e4
                           00BFBE   635 G$ADC0$0$0 == 0xbfbe
                           00BFBE   636 _ADC0	=	0xbfbe
                           00C5C4   637 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   638 _ADC0GT	=	0xc5c4
                           00C7C6   639 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   640 _ADC0LT	=	0xc7c6
                           00D3D2   641 G$DAC0$0$0 == 0xd3d2
                           00D3D2   642 _DAC0	=	0xd3d2
                           00D6D5   643 G$DAC1$0$0 == 0xd6d5
                           00D6D5   644 _DAC1	=	0xd6d5
                           00F9E9   645 G$PCA0$0$0 == 0xf9e9
                           00F9E9   646 _PCA0	=	0xf9e9
                           00FAEA   647 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   648 _PCA0CP0	=	0xfaea
                           00FBEB   649 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   650 _PCA0CP1	=	0xfbeb
                           00FCEC   651 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   652 _PCA0CP2	=	0xfcec
                           00FDED   653 G$PCA0CP3$0$0 == 0xfded
                           00FDED   654 _PCA0CP3	=	0xfded
                           00FEEE   655 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   656 _PCA0CP4	=	0xfeee
                                    657 ;--------------------------------------------------------
                                    658 ; special function bits
                                    659 ;--------------------------------------------------------
                                    660 	.area RSEG    (ABS,DATA)
      000000                        661 	.org 0x0000
                           000080   662 G$P0_0$0$0 == 0x0080
                           000080   663 _P0_0	=	0x0080
                           000081   664 G$P0_1$0$0 == 0x0081
                           000081   665 _P0_1	=	0x0081
                           000082   666 G$P0_2$0$0 == 0x0082
                           000082   667 _P0_2	=	0x0082
                           000083   668 G$P0_3$0$0 == 0x0083
                           000083   669 _P0_3	=	0x0083
                           000084   670 G$P0_4$0$0 == 0x0084
                           000084   671 _P0_4	=	0x0084
                           000085   672 G$P0_5$0$0 == 0x0085
                           000085   673 _P0_5	=	0x0085
                           000086   674 G$P0_6$0$0 == 0x0086
                           000086   675 _P0_6	=	0x0086
                           000087   676 G$P0_7$0$0 == 0x0087
                           000087   677 _P0_7	=	0x0087
                           000088   678 G$IT0$0$0 == 0x0088
                           000088   679 _IT0	=	0x0088
                           000089   680 G$IE0$0$0 == 0x0089
                           000089   681 _IE0	=	0x0089
                           00008A   682 G$IT1$0$0 == 0x008a
                           00008A   683 _IT1	=	0x008a
                           00008B   684 G$IE1$0$0 == 0x008b
                           00008B   685 _IE1	=	0x008b
                           00008C   686 G$TR0$0$0 == 0x008c
                           00008C   687 _TR0	=	0x008c
                           00008D   688 G$TF0$0$0 == 0x008d
                           00008D   689 _TF0	=	0x008d
                           00008E   690 G$TR1$0$0 == 0x008e
                           00008E   691 _TR1	=	0x008e
                           00008F   692 G$TF1$0$0 == 0x008f
                           00008F   693 _TF1	=	0x008f
                           000090   694 G$P1_0$0$0 == 0x0090
                           000090   695 _P1_0	=	0x0090
                           000091   696 G$P1_1$0$0 == 0x0091
                           000091   697 _P1_1	=	0x0091
                           000092   698 G$P1_2$0$0 == 0x0092
                           000092   699 _P1_2	=	0x0092
                           000093   700 G$P1_3$0$0 == 0x0093
                           000093   701 _P1_3	=	0x0093
                           000094   702 G$P1_4$0$0 == 0x0094
                           000094   703 _P1_4	=	0x0094
                           000095   704 G$P1_5$0$0 == 0x0095
                           000095   705 _P1_5	=	0x0095
                           000096   706 G$P1_6$0$0 == 0x0096
                           000096   707 _P1_6	=	0x0096
                           000097   708 G$P1_7$0$0 == 0x0097
                           000097   709 _P1_7	=	0x0097
                           000098   710 G$RI$0$0 == 0x0098
                           000098   711 _RI	=	0x0098
                           000098   712 G$RI0$0$0 == 0x0098
                           000098   713 _RI0	=	0x0098
                           000099   714 G$TI$0$0 == 0x0099
                           000099   715 _TI	=	0x0099
                           000099   716 G$TI0$0$0 == 0x0099
                           000099   717 _TI0	=	0x0099
                           00009A   718 G$RB8$0$0 == 0x009a
                           00009A   719 _RB8	=	0x009a
                           00009A   720 G$RB80$0$0 == 0x009a
                           00009A   721 _RB80	=	0x009a
                           00009B   722 G$TB8$0$0 == 0x009b
                           00009B   723 _TB8	=	0x009b
                           00009B   724 G$TB80$0$0 == 0x009b
                           00009B   725 _TB80	=	0x009b
                           00009C   726 G$REN$0$0 == 0x009c
                           00009C   727 _REN	=	0x009c
                           00009C   728 G$REN0$0$0 == 0x009c
                           00009C   729 _REN0	=	0x009c
                           00009D   730 G$SM2$0$0 == 0x009d
                           00009D   731 _SM2	=	0x009d
                           00009D   732 G$SM20$0$0 == 0x009d
                           00009D   733 _SM20	=	0x009d
                           00009D   734 G$MCE0$0$0 == 0x009d
                           00009D   735 _MCE0	=	0x009d
                           00009E   736 G$SM1$0$0 == 0x009e
                           00009E   737 _SM1	=	0x009e
                           00009E   738 G$SM10$0$0 == 0x009e
                           00009E   739 _SM10	=	0x009e
                           00009F   740 G$SM0$0$0 == 0x009f
                           00009F   741 _SM0	=	0x009f
                           00009F   742 G$SM00$0$0 == 0x009f
                           00009F   743 _SM00	=	0x009f
                           00009F   744 G$S0MODE$0$0 == 0x009f
                           00009F   745 _S0MODE	=	0x009f
                           0000A0   746 G$P2_0$0$0 == 0x00a0
                           0000A0   747 _P2_0	=	0x00a0
                           0000A1   748 G$P2_1$0$0 == 0x00a1
                           0000A1   749 _P2_1	=	0x00a1
                           0000A2   750 G$P2_2$0$0 == 0x00a2
                           0000A2   751 _P2_2	=	0x00a2
                           0000A3   752 G$P2_3$0$0 == 0x00a3
                           0000A3   753 _P2_3	=	0x00a3
                           0000A4   754 G$P2_4$0$0 == 0x00a4
                           0000A4   755 _P2_4	=	0x00a4
                           0000A5   756 G$P2_5$0$0 == 0x00a5
                           0000A5   757 _P2_5	=	0x00a5
                           0000A6   758 G$P2_6$0$0 == 0x00a6
                           0000A6   759 _P2_6	=	0x00a6
                           0000A7   760 G$P2_7$0$0 == 0x00a7
                           0000A7   761 _P2_7	=	0x00a7
                           0000A8   762 G$EX0$0$0 == 0x00a8
                           0000A8   763 _EX0	=	0x00a8
                           0000A9   764 G$ET0$0$0 == 0x00a9
                           0000A9   765 _ET0	=	0x00a9
                           0000AA   766 G$EX1$0$0 == 0x00aa
                           0000AA   767 _EX1	=	0x00aa
                           0000AB   768 G$ET1$0$0 == 0x00ab
                           0000AB   769 _ET1	=	0x00ab
                           0000AC   770 G$ES0$0$0 == 0x00ac
                           0000AC   771 _ES0	=	0x00ac
                           0000AC   772 G$ES$0$0 == 0x00ac
                           0000AC   773 _ES	=	0x00ac
                           0000AD   774 G$ET2$0$0 == 0x00ad
                           0000AD   775 _ET2	=	0x00ad
                           0000AF   776 G$EA$0$0 == 0x00af
                           0000AF   777 _EA	=	0x00af
                           0000B0   778 G$P3_0$0$0 == 0x00b0
                           0000B0   779 _P3_0	=	0x00b0
                           0000B1   780 G$P3_1$0$0 == 0x00b1
                           0000B1   781 _P3_1	=	0x00b1
                           0000B2   782 G$P3_2$0$0 == 0x00b2
                           0000B2   783 _P3_2	=	0x00b2
                           0000B3   784 G$P3_3$0$0 == 0x00b3
                           0000B3   785 _P3_3	=	0x00b3
                           0000B4   786 G$P3_4$0$0 == 0x00b4
                           0000B4   787 _P3_4	=	0x00b4
                           0000B5   788 G$P3_5$0$0 == 0x00b5
                           0000B5   789 _P3_5	=	0x00b5
                           0000B6   790 G$P3_6$0$0 == 0x00b6
                           0000B6   791 _P3_6	=	0x00b6
                           0000B7   792 G$P3_7$0$0 == 0x00b7
                           0000B7   793 _P3_7	=	0x00b7
                           0000B8   794 G$PX0$0$0 == 0x00b8
                           0000B8   795 _PX0	=	0x00b8
                           0000B9   796 G$PT0$0$0 == 0x00b9
                           0000B9   797 _PT0	=	0x00b9
                           0000BA   798 G$PX1$0$0 == 0x00ba
                           0000BA   799 _PX1	=	0x00ba
                           0000BB   800 G$PT1$0$0 == 0x00bb
                           0000BB   801 _PT1	=	0x00bb
                           0000BC   802 G$PS0$0$0 == 0x00bc
                           0000BC   803 _PS0	=	0x00bc
                           0000BC   804 G$PS$0$0 == 0x00bc
                           0000BC   805 _PS	=	0x00bc
                           0000BD   806 G$PT2$0$0 == 0x00bd
                           0000BD   807 _PT2	=	0x00bd
                           0000C0   808 G$SMBTOE$0$0 == 0x00c0
                           0000C0   809 _SMBTOE	=	0x00c0
                           0000C1   810 G$SMBFTE$0$0 == 0x00c1
                           0000C1   811 _SMBFTE	=	0x00c1
                           0000C2   812 G$AA$0$0 == 0x00c2
                           0000C2   813 _AA	=	0x00c2
                           0000C3   814 G$SI$0$0 == 0x00c3
                           0000C3   815 _SI	=	0x00c3
                           0000C4   816 G$STO$0$0 == 0x00c4
                           0000C4   817 _STO	=	0x00c4
                           0000C5   818 G$STA$0$0 == 0x00c5
                           0000C5   819 _STA	=	0x00c5
                           0000C6   820 G$ENSMB$0$0 == 0x00c6
                           0000C6   821 _ENSMB	=	0x00c6
                           0000C7   822 G$BUSY$0$0 == 0x00c7
                           0000C7   823 _BUSY	=	0x00c7
                           0000C8   824 G$CPRL2$0$0 == 0x00c8
                           0000C8   825 _CPRL2	=	0x00c8
                           0000C9   826 G$CT2$0$0 == 0x00c9
                           0000C9   827 _CT2	=	0x00c9
                           0000CA   828 G$TR2$0$0 == 0x00ca
                           0000CA   829 _TR2	=	0x00ca
                           0000CB   830 G$EXEN2$0$0 == 0x00cb
                           0000CB   831 _EXEN2	=	0x00cb
                           0000CC   832 G$TCLK$0$0 == 0x00cc
                           0000CC   833 _TCLK	=	0x00cc
                           0000CD   834 G$RCLK$0$0 == 0x00cd
                           0000CD   835 _RCLK	=	0x00cd
                           0000CE   836 G$EXF2$0$0 == 0x00ce
                           0000CE   837 _EXF2	=	0x00ce
                           0000CF   838 G$TF2$0$0 == 0x00cf
                           0000CF   839 _TF2	=	0x00cf
                           0000D0   840 G$P$0$0 == 0x00d0
                           0000D0   841 _P	=	0x00d0
                           0000D1   842 G$F1$0$0 == 0x00d1
                           0000D1   843 _F1	=	0x00d1
                           0000D2   844 G$OV$0$0 == 0x00d2
                           0000D2   845 _OV	=	0x00d2
                           0000D3   846 G$RS0$0$0 == 0x00d3
                           0000D3   847 _RS0	=	0x00d3
                           0000D4   848 G$RS1$0$0 == 0x00d4
                           0000D4   849 _RS1	=	0x00d4
                           0000D5   850 G$F0$0$0 == 0x00d5
                           0000D5   851 _F0	=	0x00d5
                           0000D6   852 G$AC$0$0 == 0x00d6
                           0000D6   853 _AC	=	0x00d6
                           0000D7   854 G$CY$0$0 == 0x00d7
                           0000D7   855 _CY	=	0x00d7
                           0000D8   856 G$CCF0$0$0 == 0x00d8
                           0000D8   857 _CCF0	=	0x00d8
                           0000D9   858 G$CCF1$0$0 == 0x00d9
                           0000D9   859 _CCF1	=	0x00d9
                           0000DA   860 G$CCF2$0$0 == 0x00da
                           0000DA   861 _CCF2	=	0x00da
                           0000DB   862 G$CCF3$0$0 == 0x00db
                           0000DB   863 _CCF3	=	0x00db
                           0000DC   864 G$CCF4$0$0 == 0x00dc
                           0000DC   865 _CCF4	=	0x00dc
                           0000DE   866 G$CR$0$0 == 0x00de
                           0000DE   867 _CR	=	0x00de
                           0000DF   868 G$CF$0$0 == 0x00df
                           0000DF   869 _CF	=	0x00df
                           0000E8   870 G$ADLJST$0$0 == 0x00e8
                           0000E8   871 _ADLJST	=	0x00e8
                           0000E8   872 G$AD0LJST$0$0 == 0x00e8
                           0000E8   873 _AD0LJST	=	0x00e8
                           0000E9   874 G$ADWINT$0$0 == 0x00e9
                           0000E9   875 _ADWINT	=	0x00e9
                           0000E9   876 G$AD0WINT$0$0 == 0x00e9
                           0000E9   877 _AD0WINT	=	0x00e9
                           0000EA   878 G$ADSTM0$0$0 == 0x00ea
                           0000EA   879 _ADSTM0	=	0x00ea
                           0000EA   880 G$AD0CM0$0$0 == 0x00ea
                           0000EA   881 _AD0CM0	=	0x00ea
                           0000EB   882 G$ADSTM1$0$0 == 0x00eb
                           0000EB   883 _ADSTM1	=	0x00eb
                           0000EB   884 G$AD0CM1$0$0 == 0x00eb
                           0000EB   885 _AD0CM1	=	0x00eb
                           0000EC   886 G$ADBUSY$0$0 == 0x00ec
                           0000EC   887 _ADBUSY	=	0x00ec
                           0000EC   888 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   889 _AD0BUSY	=	0x00ec
                           0000ED   890 G$ADCINT$0$0 == 0x00ed
                           0000ED   891 _ADCINT	=	0x00ed
                           0000ED   892 G$AD0INT$0$0 == 0x00ed
                           0000ED   893 _AD0INT	=	0x00ed
                           0000EE   894 G$ADCTM$0$0 == 0x00ee
                           0000EE   895 _ADCTM	=	0x00ee
                           0000EE   896 G$AD0TM$0$0 == 0x00ee
                           0000EE   897 _AD0TM	=	0x00ee
                           0000EF   898 G$ADCEN$0$0 == 0x00ef
                           0000EF   899 _ADCEN	=	0x00ef
                           0000EF   900 G$AD0EN$0$0 == 0x00ef
                           0000EF   901 _AD0EN	=	0x00ef
                           0000F8   902 G$SPIEN$0$0 == 0x00f8
                           0000F8   903 _SPIEN	=	0x00f8
                           0000F9   904 G$MSTEN$0$0 == 0x00f9
                           0000F9   905 _MSTEN	=	0x00f9
                           0000FA   906 G$SLVSEL$0$0 == 0x00fa
                           0000FA   907 _SLVSEL	=	0x00fa
                           0000FB   908 G$TXBSY$0$0 == 0x00fb
                           0000FB   909 _TXBSY	=	0x00fb
                           0000FC   910 G$RXOVRN$0$0 == 0x00fc
                           0000FC   911 _RXOVRN	=	0x00fc
                           0000FD   912 G$MODF$0$0 == 0x00fd
                           0000FD   913 _MODF	=	0x00fd
                           0000FE   914 G$WCOL$0$0 == 0x00fe
                           0000FE   915 _WCOL	=	0x00fe
                           0000FF   916 G$SPIF$0$0 == 0x00ff
                           0000FF   917 _SPIF	=	0x00ff
                           0000C7   918 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   919 _BUS_BUSY	=	0x00c7
                           0000C6   920 G$BUS_EN$0$0 == 0x00c6
                           0000C6   921 _BUS_EN	=	0x00c6
                           0000C5   922 G$BUS_START$0$0 == 0x00c5
                           0000C5   923 _BUS_START	=	0x00c5
                           0000C4   924 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   925 _BUS_STOP	=	0x00c4
                           0000C3   926 G$BUS_INT$0$0 == 0x00c3
                           0000C3   927 _BUS_INT	=	0x00c3
                           0000C2   928 G$BUS_AA$0$0 == 0x00c2
                           0000C2   929 _BUS_AA	=	0x00c2
                           0000C1   930 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   931 _BUS_FTE	=	0x00c1
                           0000C0   932 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   933 _BUS_TOE	=	0x00c0
                           000083   934 G$BUS_SCL$0$0 == 0x0083
                           000083   935 _BUS_SCL	=	0x0083
                           0000B7   936 G$SS_steer$0$0 == 0x00b7
                           0000B7   937 _SS_steer	=	0x00b7
                           0000B6   938 G$SS_range$0$0 == 0x00b6
                           0000B6   939 _SS_range	=	0x00b6
                                    940 ;--------------------------------------------------------
                                    941 ; overlayable register banks
                                    942 ;--------------------------------------------------------
                                    943 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        944 	.ds 8
                                    945 ;--------------------------------------------------------
                                    946 ; internal ram data
                                    947 ;--------------------------------------------------------
                                    948 	.area DSEG    (DATA)
                           000000   949 LLab4.lcd_clear$NumBytes$1$77==.
      000000                        950 _lcd_clear_NumBytes_1_77:
      000000                        951 	.ds 1
                           000001   952 LLab4.lcd_clear$Cmd$1$77==.
      000001                        953 _lcd_clear_Cmd_1_77:
      000001                        954 	.ds 2
                           000003   955 LLab4.read_keypad$Data$1$78==.
      000003                        956 _read_keypad_Data_1_78:
      000003                        957 	.ds 2
                           000005   958 LLab4.i2c_write_data$start_reg$1$97==.
      000005                        959 _i2c_write_data_PARM_2:
      000005                        960 	.ds 1
                           000006   961 LLab4.i2c_write_data$buffer$1$97==.
      000006                        962 _i2c_write_data_PARM_3:
      000006                        963 	.ds 3
                           000009   964 LLab4.i2c_write_data$num_bytes$1$97==.
      000009                        965 _i2c_write_data_PARM_4:
      000009                        966 	.ds 1
                           00000A   967 LLab4.i2c_read_data$start_reg$1$99==.
      00000A                        968 _i2c_read_data_PARM_2:
      00000A                        969 	.ds 1
                           00000B   970 LLab4.i2c_read_data$buffer$1$99==.
      00000B                        971 _i2c_read_data_PARM_3:
      00000B                        972 	.ds 3
                           00000E   973 LLab4.i2c_read_data$num_bytes$1$99==.
      00000E                        974 _i2c_read_data_PARM_4:
      00000E                        975 	.ds 1
                           00000F   976 LLab4.Accel_Init$Data2$1$103==.
      00000F                        977 _Accel_Init_Data2_1_103:
      00000F                        978 	.ds 1
                           000010   979 G$interrupts$0$0==.
      000010                        980 _interrupts::
      000010                        981 	.ds 1
                           000011   982 G$take_heading$0$0==.
      000011                        983 _take_heading::
      000011                        984 	.ds 1
                           000012   985 G$reading$0$0==.
      000012                        986 _reading::
      000012                        987 	.ds 2
                           000014   988 G$servo_PW_CENTER$0$0==.
      000014                        989 _servo_PW_CENTER::
      000014                        990 	.ds 2
                           000016   991 G$servo_PW_MIN$0$0==.
      000016                        992 _servo_PW_MIN::
      000016                        993 	.ds 2
                           000018   994 G$servo_PW_MAX$0$0==.
      000018                        995 _servo_PW_MAX::
      000018                        996 	.ds 2
                           00001A   997 G$servo_PW$0$0==.
      00001A                        998 _servo_PW::
      00001A                        999 	.ds 2
                           00001C  1000 G$heading$0$0==.
      00001C                       1001 _heading::
      00001C                       1002 	.ds 2
                           00001E  1003 G$final$0$0==.
      00001E                       1004 _final::
      00001E                       1005 	.ds 1
                           00001F  1006 G$MOTOR_PW$0$0==.
      00001F                       1007 _MOTOR_PW::
      00001F                       1008 	.ds 2
                           000021  1009 G$c$0$0==.
      000021                       1010 _c::
      000021                       1011 	.ds 2
                           000023  1012 G$getRange$0$0==.
      000023                       1013 _getRange::
      000023                       1014 	.ds 1
                           000024  1015 G$rWait$0$0==.
      000024                       1016 _rWait::
      000024                       1017 	.ds 1
                           000025  1018 G$range_val$0$0==.
      000025                       1019 _range_val::
      000025                       1020 	.ds 2
                           000027  1021 G$Data$0$0==.
      000027                       1022 _Data::
      000027                       1023 	.ds 2
                           000029  1024 G$addr$0$0==.
      000029                       1025 _addr::
      000029                       1026 	.ds 1
                           00002A  1027 G$motor_PW$0$0==.
      00002A                       1028 _motor_PW::
      00002A                       1029 	.ds 2
                           00002C  1030 LLab4.Read_Compass$Data$1$119==.
      00002C                       1031 _Read_Compass_Data_1_119:
      00002C                       1032 	.ds 2
                                   1033 ;--------------------------------------------------------
                                   1034 ; overlayable items in internal ram 
                                   1035 ;--------------------------------------------------------
                                   1036 	.area	OSEG    (OVR,DATA)
                                   1037 	.area	OSEG    (OVR,DATA)
                                   1038 	.area	OSEG    (OVR,DATA)
                                   1039 	.area	OSEG    (OVR,DATA)
                                   1040 	.area	OSEG    (OVR,DATA)
                                   1041 	.area	OSEG    (OVR,DATA)
                                   1042 	.area	OSEG    (OVR,DATA)
                                   1043 ;--------------------------------------------------------
                                   1044 ; Stack segment in internal ram 
                                   1045 ;--------------------------------------------------------
                                   1046 	.area	SSEG
      000000                       1047 __start__stack:
      000000                       1048 	.ds	1
                                   1049 
                                   1050 ;--------------------------------------------------------
                                   1051 ; indirectly addressable internal ram data
                                   1052 ;--------------------------------------------------------
                                   1053 	.area ISEG    (DATA)
                                   1054 ;--------------------------------------------------------
                                   1055 ; absolute internal ram data
                                   1056 ;--------------------------------------------------------
                                   1057 	.area IABS    (ABS,DATA)
                                   1058 	.area IABS    (ABS,DATA)
                                   1059 ;--------------------------------------------------------
                                   1060 ; bit data
                                   1061 ;--------------------------------------------------------
                                   1062 	.area BSEG    (BIT)
                                   1063 ;--------------------------------------------------------
                                   1064 ; paged external ram data
                                   1065 ;--------------------------------------------------------
                                   1066 	.area PSEG    (PAG,XDATA)
                                   1067 ;--------------------------------------------------------
                                   1068 ; external ram data
                                   1069 ;--------------------------------------------------------
                                   1070 	.area XSEG    (XDATA)
                           000000  1071 LLab4.lcd_print$text$1$73==.
      000000                       1072 _lcd_print_text_1_73:
      000000                       1073 	.ds 80
                                   1074 ;--------------------------------------------------------
                                   1075 ; absolute external ram data
                                   1076 ;--------------------------------------------------------
                                   1077 	.area XABS    (ABS,XDATA)
                                   1078 ;--------------------------------------------------------
                                   1079 ; external initialized ram data
                                   1080 ;--------------------------------------------------------
                                   1081 	.area XISEG   (XDATA)
                                   1082 	.area HOME    (CODE)
                                   1083 	.area GSINIT0 (CODE)
                                   1084 	.area GSINIT1 (CODE)
                                   1085 	.area GSINIT2 (CODE)
                                   1086 	.area GSINIT3 (CODE)
                                   1087 	.area GSINIT4 (CODE)
                                   1088 	.area GSINIT5 (CODE)
                                   1089 	.area GSINIT  (CODE)
                                   1090 	.area GSFINAL (CODE)
                                   1091 	.area CSEG    (CODE)
                                   1092 ;--------------------------------------------------------
                                   1093 ; interrupt vector 
                                   1094 ;--------------------------------------------------------
                                   1095 	.area HOME    (CODE)
      000000                       1096 __interrupt_vect:
      000000 02r00r00         [24] 1097 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1098 	reti
      000004                       1099 	.ds	7
      00000B 32               [24] 1100 	reti
      00000C                       1101 	.ds	7
      000013 32               [24] 1102 	reti
      000014                       1103 	.ds	7
      00001B 32               [24] 1104 	reti
      00001C                       1105 	.ds	7
      000023 32               [24] 1106 	reti
      000024                       1107 	.ds	7
      00002B 32               [24] 1108 	reti
      00002C                       1109 	.ds	7
      000033 32               [24] 1110 	reti
      000034                       1111 	.ds	7
      00003B 32               [24] 1112 	reti
      00003C                       1113 	.ds	7
      000043 32               [24] 1114 	reti
      000044                       1115 	.ds	7
      00004B 02r07r95         [24] 1116 	ljmp	_PCA_ISR
                                   1117 ;--------------------------------------------------------
                                   1118 ; global & static initialisations
                                   1119 ;--------------------------------------------------------
                                   1120 	.area HOME    (CODE)
                                   1121 	.area GSINIT  (CODE)
                                   1122 	.area GSFINAL (CODE)
                                   1123 	.area GSINIT  (CODE)
                                   1124 	.globl __sdcc_gsinit_startup
                                   1125 	.globl __sdcc_program_startup
                                   1126 	.globl __start__stack
                                   1127 	.globl __mcs51_genXINIT
                                   1128 	.globl __mcs51_genXRAMCLEAR
                                   1129 	.globl __mcs51_genRAMCLEAR
                           000000  1130 	C$Lab4.c$39$1$141 ==.
                                   1131 ;	C:\LITEC\Lab4\Lab4.c:39: unsigned int servo_PW_CENTER = 2905; // Center PW value
      000000 75*14 59         [24] 1132 	mov	_servo_PW_CENTER,#0x59
      000003 75*15 0B         [24] 1133 	mov	(_servo_PW_CENTER + 1),#0x0B
                           000006  1134 	C$Lab4.c$40$1$141 ==.
                                   1135 ;	C:\LITEC\Lab4\Lab4.c:40: unsigned int servo_PW_MIN = 2385; // Minimum left PW value
      000006 75*16 51         [24] 1136 	mov	_servo_PW_MIN,#0x51
      000009 75*17 09         [24] 1137 	mov	(_servo_PW_MIN + 1),#0x09
                           00000C  1138 	C$Lab4.c$41$1$141 ==.
                                   1139 ;	C:\LITEC\Lab4\Lab4.c:41: unsigned int servo_PW_MAX = 3315; // Maximum right PW value
      00000C 75*18 F3         [24] 1140 	mov	_servo_PW_MAX,#0xF3
      00000F 75*19 0C         [24] 1141 	mov	(_servo_PW_MAX + 1),#0x0C
                           000012  1142 	C$Lab4.c$42$1$141 ==.
                                   1143 ;	C:\LITEC\Lab4\Lab4.c:42: unsigned int servo_PW = 2905; // Start PW at center
      000012 75*1A 59         [24] 1144 	mov	_servo_PW,#0x59
      000015 75*1B 0B         [24] 1145 	mov	(_servo_PW + 1),#0x0B
                           000018  1146 	C$Lab4.c$43$1$141 ==.
                                   1147 ;	C:\LITEC\Lab4\Lab4.c:43: unsigned int heading = 900;//set initial heading to 90 degrees
      000018 75*1C 84         [24] 1148 	mov	_heading,#0x84
      00001B 75*1D 03         [24] 1149 	mov	(_heading + 1),#0x03
                           00001E  1150 	C$Lab4.c$44$1$141 ==.
                                   1151 ;	C:\LITEC\Lab4\Lab4.c:44: unsigned char final = 0;
      00001E 75*1E 00         [24] 1152 	mov	_final,#0x00
                           000021  1153 	C$Lab4.c$47$1$141 ==.
                                   1154 ;	C:\LITEC\Lab4\Lab4.c:47: unsigned int MOTOR_PW = 0;
      000021 E4               [12] 1155 	clr	a
      000022 F5*1F            [12] 1156 	mov	_MOTOR_PW,a
      000024 F5*20            [12] 1157 	mov	(_MOTOR_PW + 1),a
                           000026  1158 	C$Lab4.c$48$1$141 ==.
                                   1159 ;	C:\LITEC\Lab4\Lab4.c:48: unsigned int c = 0;
      000026 F5*21            [12] 1160 	mov	_c,a
      000028 F5*22            [12] 1161 	mov	(_c + 1),a
                           00002A  1162 	C$Lab4.c$49$1$141 ==.
                                   1163 ;	C:\LITEC\Lab4\Lab4.c:49: unsigned char getRange = 1;
      00002A 75*23 01         [24] 1164 	mov	_getRange,#0x01
                           00002D  1165 	C$Lab4.c$50$1$141 ==.
                                   1166 ;	C:\LITEC\Lab4\Lab4.c:50: unsigned char rWait = 0;
                                   1167 ;	1-genFromRTrack replaced	mov	_rWait,#0x00
      00002D F5*24            [12] 1168 	mov	_rWait,a
                           00002F  1169 	C$Lab4.c$51$1$141 ==.
                                   1170 ;	C:\LITEC\Lab4\Lab4.c:51: unsigned int range_val = 0;
      00002F F5*25            [12] 1171 	mov	_range_val,a
      000031 F5*26            [12] 1172 	mov	(_range_val + 1),a
                           000033  1173 	C$Lab4.c$53$1$141 ==.
                                   1174 ;	C:\LITEC\Lab4\Lab4.c:53: unsigned char addr = 0xE0; // the address of the ranger is 0xE0
      000033 75*29 E0         [24] 1175 	mov	_addr,#0xE0
                                   1176 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1177 	ljmp	__sdcc_program_startup
                                   1178 ;--------------------------------------------------------
                                   1179 ; Home
                                   1180 ;--------------------------------------------------------
                                   1181 	.area HOME    (CODE)
                                   1182 	.area HOME    (CODE)
      00004E                       1183 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1184 	ljmp	_main
                                   1185 ;	return from main will return to caller
                                   1186 ;--------------------------------------------------------
                                   1187 ; code
                                   1188 ;--------------------------------------------------------
                                   1189 	.area CSEG    (CODE)
                                   1190 ;------------------------------------------------------------
                                   1191 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1192 ;------------------------------------------------------------
                                   1193 ;i                         Allocated to registers 
                                   1194 ;------------------------------------------------------------
                           000000  1195 	G$SYSCLK_Init$0$0 ==.
                           000000  1196 	C$c8051_SDCC.h$42$0$0 ==.
                                   1197 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1198 ;	-----------------------------------------
                                   1199 ;	 function SYSCLK_Init
                                   1200 ;	-----------------------------------------
      000000                       1201 _SYSCLK_Init:
                           000007  1202 	ar7 = 0x07
                           000006  1203 	ar6 = 0x06
                           000005  1204 	ar5 = 0x05
                           000004  1205 	ar4 = 0x04
                           000003  1206 	ar3 = 0x03
                           000002  1207 	ar2 = 0x02
                           000001  1208 	ar1 = 0x01
                           000000  1209 	ar0 = 0x00
                           000000  1210 	C$c8051_SDCC.h$46$1$31 ==.
                                   1211 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1212 	mov	_OSCXCN,#0x67
                           000003  1213 	C$c8051_SDCC.h$49$1$31 ==.
                                   1214 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1215 	mov	r6,#0x00
      000005 7F 01            [12] 1216 	mov	r7,#0x01
      000007                       1217 00107$:
      000007 1E               [12] 1218 	dec	r6
      000008 BE FF 01         [24] 1219 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1220 	dec	r7
      00000C                       1221 00121$:
      00000C EE               [12] 1222 	mov	a,r6
      00000D 4F               [12] 1223 	orl	a,r7
      00000E 70 F7            [24] 1224 	jnz	00107$
                           000010  1225 	C$c8051_SDCC.h$51$1$31 ==.
                                   1226 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1227 00102$:
      000010 E5 B1            [12] 1228 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1229 	jnb	acc.7,00102$
                           000015  1230 	C$c8051_SDCC.h$53$1$31 ==.
                                   1231 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1232 	mov	_OSCICN,#0x88
                           000018  1233 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1234 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1235 	ret
                                   1236 ;------------------------------------------------------------
                                   1237 ;Allocation info for local variables in function 'UART0_Init'
                                   1238 ;------------------------------------------------------------
                           000019  1239 	G$UART0_Init$0$0 ==.
                           000019  1240 	C$c8051_SDCC.h$64$1$31 ==.
                                   1241 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1242 ;	-----------------------------------------
                                   1243 ;	 function UART0_Init
                                   1244 ;	-----------------------------------------
      000019                       1245 _UART0_Init:
                           000019  1246 	C$c8051_SDCC.h$66$1$33 ==.
                                   1247 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1248 	mov	_SCON0,#0x50
                           00001C  1249 	C$c8051_SDCC.h$67$1$33 ==.
                                   1250 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1251 	mov	_TMOD,#0x20
                           00001F  1252 	C$c8051_SDCC.h$68$1$33 ==.
                                   1253 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1254 	mov	_TH1,#0xDC
                           000022  1255 	C$c8051_SDCC.h$69$1$33 ==.
                                   1256 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1257 	setb	_TR1
                           000024  1258 	C$c8051_SDCC.h$70$1$33 ==.
                                   1259 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1260 	orl	_CKCON,#0x10
                           000027  1261 	C$c8051_SDCC.h$71$1$33 ==.
                                   1262 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1263 	orl	_PCON,#0x80
                           00002A  1264 	C$c8051_SDCC.h$73$1$33 ==.
                                   1265 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1266 	setb	_TI0
                           00002C  1267 	C$c8051_SDCC.h$74$1$33 ==.
                                   1268 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1269 	orl	_P0MDOUT,#0x01
                           00002F  1270 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1271 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1272 	ret
                                   1273 ;------------------------------------------------------------
                                   1274 ;Allocation info for local variables in function 'Sys_Init'
                                   1275 ;------------------------------------------------------------
                           000030  1276 	G$Sys_Init$0$0 ==.
                           000030  1277 	C$c8051_SDCC.h$83$1$33 ==.
                                   1278 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1279 ;	-----------------------------------------
                                   1280 ;	 function Sys_Init
                                   1281 ;	-----------------------------------------
      000030                       1282 _Sys_Init:
                           000030  1283 	C$c8051_SDCC.h$85$1$35 ==.
                                   1284 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1285 	mov	_WDTCN,#0xDE
                           000033  1286 	C$c8051_SDCC.h$86$1$35 ==.
                                   1287 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1288 	mov	_WDTCN,#0xAD
                           000036  1289 	C$c8051_SDCC.h$88$1$35 ==.
                                   1290 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1291 	lcall	_SYSCLK_Init
                           000039  1292 	C$c8051_SDCC.h$89$1$35 ==.
                                   1293 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1294 	lcall	_UART0_Init
                           00003C  1295 	C$c8051_SDCC.h$91$1$35 ==.
                                   1296 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1297 	orl	_XBR0,#0x04
                           00003F  1298 	C$c8051_SDCC.h$92$1$35 ==.
                                   1299 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1300 	orl	_XBR2,#0x40
                           000042  1301 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1302 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1303 	ret
                                   1304 ;------------------------------------------------------------
                                   1305 ;Allocation info for local variables in function 'putchar'
                                   1306 ;------------------------------------------------------------
                                   1307 ;c                         Allocated to registers r7 
                                   1308 ;------------------------------------------------------------
                           000043  1309 	G$putchar$0$0 ==.
                           000043  1310 	C$c8051_SDCC.h$98$1$35 ==.
                                   1311 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1312 ;	-----------------------------------------
                                   1313 ;	 function putchar
                                   1314 ;	-----------------------------------------
      000043                       1315 _putchar:
      000043 AF 82            [24] 1316 	mov	r7,dpl
                           000045  1317 	C$c8051_SDCC.h$100$1$37 ==.
                                   1318 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1319 00101$:
                           000045  1320 	C$c8051_SDCC.h$101$1$37 ==.
                                   1321 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1322 	jbc	_TI0,00112$
      000048 80 FB            [24] 1323 	sjmp	00101$
      00004A                       1324 00112$:
                           00004A  1325 	C$c8051_SDCC.h$102$1$37 ==.
                                   1326 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1327 	mov	_SBUF0,r7
                           00004C  1328 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1329 	XG$putchar$0$0 ==.
      00004C 22               [24] 1330 	ret
                                   1331 ;------------------------------------------------------------
                                   1332 ;Allocation info for local variables in function 'getchar'
                                   1333 ;------------------------------------------------------------
                                   1334 ;c                         Allocated to registers 
                                   1335 ;------------------------------------------------------------
                           00004D  1336 	G$getchar$0$0 ==.
                           00004D  1337 	C$c8051_SDCC.h$108$1$37 ==.
                                   1338 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1339 ;	-----------------------------------------
                                   1340 ;	 function getchar
                                   1341 ;	-----------------------------------------
      00004D                       1342 _getchar:
                           00004D  1343 	C$c8051_SDCC.h$111$1$39 ==.
                                   1344 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1345 00101$:
                           00004D  1346 	C$c8051_SDCC.h$112$1$39 ==.
                                   1347 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1348 	jbc	_RI0,00112$
      000050 80 FB            [24] 1349 	sjmp	00101$
      000052                       1350 00112$:
                           000052  1351 	C$c8051_SDCC.h$113$1$39 ==.
                                   1352 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1353 	mov	dpl,_SBUF0
                           000055  1354 	C$c8051_SDCC.h$114$1$39 ==.
                                   1355 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1356 	lcall	_putchar
                           000058  1357 	C$c8051_SDCC.h$115$1$39 ==.
                                   1358 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1359 	mov	dpl,_SBUF0
                           00005B  1360 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1361 	XG$getchar$0$0 ==.
      00005B 22               [24] 1362 	ret
                                   1363 ;------------------------------------------------------------
                                   1364 ;Allocation info for local variables in function 'lcd_print'
                                   1365 ;------------------------------------------------------------
                                   1366 ;fmt                       Allocated to stack - _bp -5
                                   1367 ;len                       Allocated to registers r6 
                                   1368 ;i                         Allocated to registers 
                                   1369 ;ap                        Allocated to registers 
                                   1370 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1371 ;------------------------------------------------------------
                           00005C  1372 	G$lcd_print$0$0 ==.
                           00005C  1373 	C$i2c.h$81$1$39 ==.
                                   1374 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1375 ;	-----------------------------------------
                                   1376 ;	 function lcd_print
                                   1377 ;	-----------------------------------------
      00005C                       1378 _lcd_print:
      00005C C0*00            [24] 1379 	push	_bp
      00005E 85 81*00         [24] 1380 	mov	_bp,sp
                           000061  1381 	C$i2c.h$87$1$73 ==.
                                   1382 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1383 	mov	a,_bp
      000063 24 FB            [12] 1384 	add	a,#0xfb
      000065 F8               [12] 1385 	mov	r0,a
      000066 86 82            [24] 1386 	mov	dpl,@r0
      000068 08               [12] 1387 	inc	r0
      000069 86 83            [24] 1388 	mov	dph,@r0
      00006B 08               [12] 1389 	inc	r0
      00006C 86 F0            [24] 1390 	mov	b,@r0
      00006E 12r00r00         [24] 1391 	lcall	_strlen
      000071 E5 82            [12] 1392 	mov	a,dpl
      000073 85 83 F0         [24] 1393 	mov	b,dph
      000076 45 F0            [12] 1394 	orl	a,b
      000078 70 02            [24] 1395 	jnz	00102$
      00007A 80 62            [24] 1396 	sjmp	00109$
      00007C                       1397 00102$:
                           00007C  1398 	C$i2c.h$89$2$74 ==.
                                   1399 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1400 	mov	a,_bp
      00007E 24 FB            [12] 1401 	add	a,#0xFB
      000080 FF               [12] 1402 	mov	r7,a
      000081 8F*00            [24] 1403 	mov	_vsprintf_PARM_3,r7
                           000083  1404 	C$i2c.h$90$1$73 ==.
                                   1405 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1406 	mov	a,_bp
      000085 24 FB            [12] 1407 	add	a,#0xfb
      000087 F8               [12] 1408 	mov	r0,a
      000088 86*00            [24] 1409 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1410 	inc	r0
      00008B 86*01            [24] 1411 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1412 	inc	r0
      00008E 86*02            [24] 1413 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1414 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1415 	mov	b,#0x00
      000096 12r00r00         [24] 1416 	lcall	_vsprintf
                           000099  1417 	C$i2c.h$93$1$73 ==.
                                   1418 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1419 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1420 	mov	b,#0x00
      00009F 12r00r00         [24] 1421 	lcall	_strlen
      0000A2 AE 82            [24] 1422 	mov	r6,dpl
                           0000A4  1423 	C$i2c.h$94$1$73 ==.
                                   1424 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1425 	mov	r7,#0x00
      0000A6                       1426 00107$:
      0000A6 C3               [12] 1427 	clr	c
      0000A7 EF               [12] 1428 	mov	a,r7
      0000A8 9E               [12] 1429 	subb	a,r6
      0000A9 50 1F            [24] 1430 	jnc	00105$
                           0000AB  1431 	C$i2c.h$96$2$76 ==.
                                   1432 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1433 	mov	a,r7
      0000AC 24r00            [12] 1434 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1435 	mov	dpl,a
      0000B0 E4               [12] 1436 	clr	a
      0000B1 34s00            [12] 1437 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1438 	mov	dph,a
      0000B5 E0               [24] 1439 	movx	a,@dptr
      0000B6 FD               [12] 1440 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1441 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1442 	mov	a,r7
      0000BB 24r00            [12] 1443 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1444 	mov	dpl,a
      0000BF E4               [12] 1445 	clr	a
      0000C0 34s00            [12] 1446 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1447 	mov	dph,a
      0000C4 74 0D            [12] 1448 	mov	a,#0x0D
      0000C6 F0               [24] 1449 	movx	@dptr,a
      0000C7                       1450 00108$:
                           0000C7  1451 	C$i2c.h$94$1$73 ==.
                                   1452 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1453 	inc	r7
      0000C8 80 DC            [24] 1454 	sjmp	00107$
      0000CA                       1455 00105$:
                           0000CA  1456 	C$i2c.h$99$1$73 ==.
                                   1457 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1458 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1459 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1460 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1461 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1462 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1463 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1464 	lcall	_i2c_write_data
      0000DE                       1465 00109$:
      0000DE D0*00            [24] 1466 	pop	_bp
                           0000E0  1467 	C$i2c.h$100$1$73 ==.
                           0000E0  1468 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1469 	ret
                                   1470 ;------------------------------------------------------------
                                   1471 ;Allocation info for local variables in function 'lcd_clear'
                                   1472 ;------------------------------------------------------------
                                   1473 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1474 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1475 ;------------------------------------------------------------
                           0000E1  1476 	G$lcd_clear$0$0 ==.
                           0000E1  1477 	C$i2c.h$103$1$73 ==.
                                   1478 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1479 ;	-----------------------------------------
                                   1480 ;	 function lcd_clear
                                   1481 ;	-----------------------------------------
      0000E1                       1482 _lcd_clear:
                           0000E1  1483 	C$i2c.h$105$1$73 ==.
                                   1484 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1485 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1486 	C$i2c.h$107$1$77 ==.
                                   1487 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1488 00101$:
      0000E4 74 C0            [12] 1489 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1490 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1491 	jc	00103$
      0000EA 75*0Br00         [24] 1492 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1493 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1494 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1495 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1496 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1497 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1498 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1499 	sjmp	00101$
      000101                       1500 00103$:
                           000101  1501 	C$i2c.h$109$1$77 ==.
                                   1502 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1503 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1504 	C$i2c.h$110$1$77 ==.
                                   1505 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1506 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1507 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1508 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1509 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1510 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1511 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1512 	lcall	_i2c_write_data
                           000119  1513 	C$i2c.h$111$1$77 ==.
                           000119  1514 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1515 	ret
                                   1516 ;------------------------------------------------------------
                                   1517 ;Allocation info for local variables in function 'read_keypad'
                                   1518 ;------------------------------------------------------------
                                   1519 ;i                         Allocated to registers r7 
                                   1520 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1521 ;------------------------------------------------------------
                           00011A  1522 	G$read_keypad$0$0 ==.
                           00011A  1523 	C$i2c.h$114$1$77 ==.
                                   1524 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1525 ;	-----------------------------------------
                                   1526 ;	 function read_keypad
                                   1527 ;	-----------------------------------------
      00011A                       1528 _read_keypad:
                           00011A  1529 	C$i2c.h$118$1$78 ==.
                                   1530 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1531 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1532 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1533 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1534 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1535 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1536 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1537 	lcall	_i2c_read_data
                           00012F  1538 	C$i2c.h$119$1$78 ==.
                                   1539 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1540 	mov	a,#0xFF
      000131 B5*03 05         [24] 1541 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1542 	mov	dpl,#0x00
      000137 80 5F            [24] 1543 	sjmp	00116$
      000139                       1544 00102$:
                           000139  1545 	C$i2c.h$121$1$78 ==.
                                   1546 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1547 	mov	r7,#0x00
      00013B 8F 06            [24] 1548 	mov	ar6,r7
      00013D                       1549 00114$:
                           00013D  1550 	C$i2c.h$123$2$79 ==.
                                   1551 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1552 	mov	b,r6
      00013F 05 F0            [12] 1553 	inc	b
      000141 7C 01            [12] 1554 	mov	r4,#0x01
      000143 7D 00            [12] 1555 	mov	r5,#0x00
      000145 80 06            [24] 1556 	sjmp	00145$
      000147                       1557 00144$:
      000147 EC               [12] 1558 	mov	a,r4
      000148 2C               [12] 1559 	add	a,r4
      000149 FC               [12] 1560 	mov	r4,a
      00014A ED               [12] 1561 	mov	a,r5
      00014B 33               [12] 1562 	rlc	a
      00014C FD               [12] 1563 	mov	r5,a
      00014D                       1564 00145$:
      00014D D5 F0 F7         [24] 1565 	djnz	b,00144$
      000150 AA*03            [24] 1566 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1567 	mov	r3,#0x00
      000154 EA               [12] 1568 	mov	a,r2
      000155 52 04            [12] 1569 	anl	ar4,a
      000157 EB               [12] 1570 	mov	a,r3
      000158 52 05            [12] 1571 	anl	ar5,a
      00015A EC               [12] 1572 	mov	a,r4
      00015B 4D               [12] 1573 	orl	a,r5
      00015C 60 07            [24] 1574 	jz	00115$
                           00015E  1575 	C$i2c.h$124$2$79 ==.
                                   1576 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1577 	mov	a,#0x31
      000160 2F               [12] 1578 	add	a,r7
      000161 F5 82            [12] 1579 	mov	dpl,a
      000163 80 33            [24] 1580 	sjmp	00116$
      000165                       1581 00115$:
                           000165  1582 	C$i2c.h$121$1$78 ==.
                                   1583 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1584 	inc	r6
      000166 8E 07            [24] 1585 	mov	ar7,r6
      000168 BE 08 00         [24] 1586 	cjne	r6,#0x08,00147$
      00016B                       1587 00147$:
      00016B 40 D0            [24] 1588 	jc	00114$
                           00016D  1589 	C$i2c.h$127$1$78 ==.
                                   1590 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1591 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1592 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1593 	mov	dpl,#0x39
      000175 80 21            [24] 1594 	sjmp	00116$
      000177                       1595 00107$:
                           000177  1596 	C$i2c.h$129$1$78 ==.
                                   1597 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1598 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1599 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1600 	mov	dpl,#0x2A
      00017F 80 17            [24] 1601 	sjmp	00116$
      000181                       1602 00109$:
                           000181  1603 	C$i2c.h$131$1$78 ==.
                                   1604 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1605 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1606 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1607 	mov	dpl,#0x30
      000189 80 0D            [24] 1608 	sjmp	00116$
      00018B                       1609 00111$:
                           00018B  1610 	C$i2c.h$133$1$78 ==.
                                   1611 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1612 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1613 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1614 	mov	dpl,#0x23
      000193 80 03            [24] 1615 	sjmp	00116$
      000195                       1616 00113$:
                           000195  1617 	C$i2c.h$135$1$78 ==.
                                   1618 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1619 	mov	dpl,#0xFF
      000198                       1620 00116$:
                           000198  1621 	C$i2c.h$136$1$78 ==.
                           000198  1622 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1623 	ret
                                   1624 ;------------------------------------------------------------
                                   1625 ;Allocation info for local variables in function 'kpd_input'
                                   1626 ;------------------------------------------------------------
                                   1627 ;mode                      Allocated to registers r7 
                                   1628 ;sum                       Allocated to registers r5 r6 
                                   1629 ;key                       Allocated to registers r3 
                                   1630 ;i                         Allocated to registers 
                                   1631 ;------------------------------------------------------------
                           000199  1632 	G$kpd_input$0$0 ==.
                           000199  1633 	C$i2c.h$148$1$78 ==.
                                   1634 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1635 ;	-----------------------------------------
                                   1636 ;	 function kpd_input
                                   1637 ;	-----------------------------------------
      000199                       1638 _kpd_input:
      000199 AF 82            [24] 1639 	mov	r7,dpl
                           00019B  1640 	C$i2c.h$153$1$81 ==.
                                   1641 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1642 	C$i2c.h$156$1$81 ==.
                                   1643 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1644 	clr	a
      00019C FD               [12] 1645 	mov	r5,a
      00019D FE               [12] 1646 	mov	r6,a
      00019E EF               [12] 1647 	mov	a,r7
      00019F 70 1D            [24] 1648 	jnz	00102$
      0001A1 C0 06            [24] 1649 	push	ar6
      0001A3 C0 05            [24] 1650 	push	ar5
      0001A5 74r00            [12] 1651 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1652 	push	acc
      0001A9 74s00            [12] 1653 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1654 	push	acc
      0001AD 74 80            [12] 1655 	mov	a,#0x80
      0001AF C0 E0            [24] 1656 	push	acc
      0001B1 12r00r5C         [24] 1657 	lcall	_lcd_print
      0001B4 15 81            [12] 1658 	dec	sp
      0001B6 15 81            [12] 1659 	dec	sp
      0001B8 15 81            [12] 1660 	dec	sp
      0001BA D0 05            [24] 1661 	pop	ar5
      0001BC D0 06            [24] 1662 	pop	ar6
      0001BE                       1663 00102$:
                           0001BE  1664 	C$i2c.h$158$1$81 ==.
                                   1665 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1666 	push	ar6
      0001C0 C0 05            [24] 1667 	push	ar5
      0001C2 74 08            [12] 1668 	mov	a,#0x08
      0001C4 C0 E0            [24] 1669 	push	acc
      0001C6 E4               [12] 1670 	clr	a
      0001C7 C0 E0            [24] 1671 	push	acc
      0001C9 74 08            [12] 1672 	mov	a,#0x08
      0001CB C0 E0            [24] 1673 	push	acc
      0001CD E4               [12] 1674 	clr	a
      0001CE C0 E0            [24] 1675 	push	acc
      0001D0 74 08            [12] 1676 	mov	a,#0x08
      0001D2 C0 E0            [24] 1677 	push	acc
      0001D4 E4               [12] 1678 	clr	a
      0001D5 C0 E0            [24] 1679 	push	acc
      0001D7 74 08            [12] 1680 	mov	a,#0x08
      0001D9 C0 E0            [24] 1681 	push	acc
      0001DB E4               [12] 1682 	clr	a
      0001DC C0 E0            [24] 1683 	push	acc
      0001DE 74 08            [12] 1684 	mov	a,#0x08
      0001E0 C0 E0            [24] 1685 	push	acc
      0001E2 E4               [12] 1686 	clr	a
      0001E3 C0 E0            [24] 1687 	push	acc
      0001E5 74r16            [12] 1688 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1689 	push	acc
      0001E9 74s00            [12] 1690 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1691 	push	acc
      0001ED 74 80            [12] 1692 	mov	a,#0x80
      0001EF C0 E0            [24] 1693 	push	acc
      0001F1 12r00r5C         [24] 1694 	lcall	_lcd_print
      0001F4 E5 81            [12] 1695 	mov	a,sp
      0001F6 24 F3            [12] 1696 	add	a,#0xf3
      0001F8 F5 81            [12] 1697 	mov	sp,a
                           0001FA  1698 	C$i2c.h$160$1$81 ==.
                                   1699 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1700 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1701 	mov	b,#0x07
      000200 E4               [12] 1702 	clr	a
      000201 12r03r0D         [24] 1703 	lcall	_delay_time
      000204 D0 05            [24] 1704 	pop	ar5
      000206 D0 06            [24] 1705 	pop	ar6
                           000208  1706 	C$i2c.h$164$1$81 ==.
                                   1707 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1708 	mov	r7,#0x00
                           00020A  1709 	C$i2c.h$166$3$84 ==.
                                   1710 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1711 00104$:
      00020A C0 07            [24] 1712 	push	ar7
      00020C C0 06            [24] 1713 	push	ar6
      00020E C0 05            [24] 1714 	push	ar5
      000210 12r01r1A         [24] 1715 	lcall	_read_keypad
      000213 AC 82            [24] 1716 	mov	r4,dpl
      000215 D0 05            [24] 1717 	pop	ar5
      000217 D0 06            [24] 1718 	pop	ar6
      000219 D0 07            [24] 1719 	pop	ar7
      00021B 8C 03            [24] 1720 	mov	ar3,r4
      00021D BC FF 02         [24] 1721 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1722 	sjmp	00105$
      000222                       1723 00146$:
      000222 BB 2A 17         [24] 1724 	cjne	r3,#0x2A,00106$
      000225                       1725 00105$:
      000225 90 27 10         [24] 1726 	mov	dptr,#0x2710
      000228 E4               [12] 1727 	clr	a
      000229 F5 F0            [12] 1728 	mov	b,a
      00022B C0 07            [24] 1729 	push	ar7
      00022D C0 06            [24] 1730 	push	ar6
      00022F C0 05            [24] 1731 	push	ar5
      000231 12r03r0D         [24] 1732 	lcall	_delay_time
      000234 D0 05            [24] 1733 	pop	ar5
      000236 D0 06            [24] 1734 	pop	ar6
      000238 D0 07            [24] 1735 	pop	ar7
      00023A 80 CE            [24] 1736 	sjmp	00104$
      00023C                       1737 00106$:
                           00023C  1738 	C$i2c.h$167$2$82 ==.
                                   1739 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1740 	cjne	r3,#0x23,00114$
                           00023F  1741 	C$i2c.h$169$3$83 ==.
                                   1742 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1743 00107$:
      00023F C0 06            [24] 1744 	push	ar6
      000241 C0 05            [24] 1745 	push	ar5
      000243 12r01r1A         [24] 1746 	lcall	_read_keypad
      000246 AC 82            [24] 1747 	mov	r4,dpl
      000248 D0 05            [24] 1748 	pop	ar5
      00024A D0 06            [24] 1749 	pop	ar6
      00024C BC 23 13         [24] 1750 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1751 	mov	dptr,#0x2710
      000252 E4               [12] 1752 	clr	a
      000253 F5 F0            [12] 1753 	mov	b,a
      000255 C0 06            [24] 1754 	push	ar6
      000257 C0 05            [24] 1755 	push	ar5
      000259 12r03r0D         [24] 1756 	lcall	_delay_time
      00025C D0 05            [24] 1757 	pop	ar5
      00025E D0 06            [24] 1758 	pop	ar6
      000260 80 DD            [24] 1759 	sjmp	00107$
      000262                       1760 00109$:
                           000262  1761 	C$i2c.h$170$3$83 ==.
                                   1762 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1763 	mov	dpl,r5
      000264 8E 83            [24] 1764 	mov	dph,r6
      000266 02r03r0C         [24] 1765 	ljmp	00119$
      000269                       1766 00114$:
                           000269  1767 	C$i2c.h$174$3$84 ==.
                                   1768 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1769 	mov	a,r3
      00026A FA               [12] 1770 	mov	r2,a
      00026B 33               [12] 1771 	rlc	a
      00026C 95 E0            [12] 1772 	subb	a,acc
      00026E FC               [12] 1773 	mov	r4,a
      00026F C0 07            [24] 1774 	push	ar7
      000271 C0 06            [24] 1775 	push	ar6
      000273 C0 05            [24] 1776 	push	ar5
      000275 C0 04            [24] 1777 	push	ar4
      000277 C0 03            [24] 1778 	push	ar3
      000279 C0 02            [24] 1779 	push	ar2
      00027B C0 02            [24] 1780 	push	ar2
      00027D C0 04            [24] 1781 	push	ar4
      00027F 74r26            [12] 1782 	mov	a,#___str_2
      000281 C0 E0            [24] 1783 	push	acc
      000283 74s00            [12] 1784 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1785 	push	acc
      000287 74 80            [12] 1786 	mov	a,#0x80
      000289 C0 E0            [24] 1787 	push	acc
      00028B 12r00r5C         [24] 1788 	lcall	_lcd_print
      00028E E5 81            [12] 1789 	mov	a,sp
      000290 24 FB            [12] 1790 	add	a,#0xfb
      000292 F5 81            [12] 1791 	mov	sp,a
      000294 D0 02            [24] 1792 	pop	ar2
      000296 D0 03            [24] 1793 	pop	ar3
      000298 D0 04            [24] 1794 	pop	ar4
      00029A D0 05            [24] 1795 	pop	ar5
      00029C D0 06            [24] 1796 	pop	ar6
                           00029E  1797 	C$i2c.h$175$1$81 ==.
                                   1798 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1799 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1800 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1801 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1802 	push	ar4
      0002A7 C0 03            [24] 1803 	push	ar3
      0002A9 C0 02            [24] 1804 	push	ar2
      0002AB 12r00r00         [24] 1805 	lcall	__mulint
      0002AE A8 82            [24] 1806 	mov	r0,dpl
      0002B0 A9 83            [24] 1807 	mov	r1,dph
      0002B2 D0 02            [24] 1808 	pop	ar2
      0002B4 D0 03            [24] 1809 	pop	ar3
      0002B6 D0 04            [24] 1810 	pop	ar4
      0002B8 D0 07            [24] 1811 	pop	ar7
      0002BA EA               [12] 1812 	mov	a,r2
      0002BB 28               [12] 1813 	add	a,r0
      0002BC F8               [12] 1814 	mov	r0,a
      0002BD EC               [12] 1815 	mov	a,r4
      0002BE 39               [12] 1816 	addc	a,r1
      0002BF F9               [12] 1817 	mov	r1,a
      0002C0 E8               [12] 1818 	mov	a,r0
      0002C1 24 D0            [12] 1819 	add	a,#0xD0
      0002C3 FD               [12] 1820 	mov	r5,a
      0002C4 E9               [12] 1821 	mov	a,r1
      0002C5 34 FF            [12] 1822 	addc	a,#0xFF
      0002C7 FE               [12] 1823 	mov	r6,a
                           0002C8  1824 	C$i2c.h$176$3$84 ==.
                                   1825 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1826 00110$:
      0002C8 C0 07            [24] 1827 	push	ar7
      0002CA C0 06            [24] 1828 	push	ar6
      0002CC C0 05            [24] 1829 	push	ar5
      0002CE C0 03            [24] 1830 	push	ar3
      0002D0 12r01r1A         [24] 1831 	lcall	_read_keypad
      0002D3 AC 82            [24] 1832 	mov	r4,dpl
      0002D5 D0 03            [24] 1833 	pop	ar3
      0002D7 D0 05            [24] 1834 	pop	ar5
      0002D9 D0 06            [24] 1835 	pop	ar6
      0002DB D0 07            [24] 1836 	pop	ar7
      0002DD EC               [12] 1837 	mov	a,r4
      0002DE B5 03 1B         [24] 1838 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1839 	mov	dptr,#0x2710
      0002E4 E4               [12] 1840 	clr	a
      0002E5 F5 F0            [12] 1841 	mov	b,a
      0002E7 C0 07            [24] 1842 	push	ar7
      0002E9 C0 06            [24] 1843 	push	ar6
      0002EB C0 05            [24] 1844 	push	ar5
      0002ED C0 03            [24] 1845 	push	ar3
      0002EF 12r03r0D         [24] 1846 	lcall	_delay_time
      0002F2 D0 03            [24] 1847 	pop	ar3
      0002F4 D0 05            [24] 1848 	pop	ar5
      0002F6 D0 06            [24] 1849 	pop	ar6
      0002F8 D0 07            [24] 1850 	pop	ar7
      0002FA 80 CC            [24] 1851 	sjmp	00110$
      0002FC                       1852 00118$:
                           0002FC  1853 	C$i2c.h$164$1$81 ==.
                                   1854 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1855 	inc	r7
      0002FD C3               [12] 1856 	clr	c
      0002FE EF               [12] 1857 	mov	a,r7
      0002FF 64 80            [12] 1858 	xrl	a,#0x80
      000301 94 85            [12] 1859 	subb	a,#0x85
      000303 50 03            [24] 1860 	jnc	00155$
      000305 02r02r0A         [24] 1861 	ljmp	00104$
      000308                       1862 00155$:
                           000308  1863 	C$i2c.h$179$1$81 ==.
                                   1864 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1865 	mov	dpl,r5
      00030A 8E 83            [24] 1866 	mov	dph,r6
      00030C                       1867 00119$:
                           00030C  1868 	C$i2c.h$180$1$81 ==.
                           00030C  1869 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1870 	ret
                                   1871 ;------------------------------------------------------------
                                   1872 ;Allocation info for local variables in function 'delay_time'
                                   1873 ;------------------------------------------------------------
                                   1874 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1875 ;index                     Allocated to registers 
                                   1876 ;------------------------------------------------------------
                           00030D  1877 	G$delay_time$0$0 ==.
                           00030D  1878 	C$i2c.h$189$1$81 ==.
                                   1879 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1880 ;	-----------------------------------------
                                   1881 ;	 function delay_time
                                   1882 ;	-----------------------------------------
      00030D                       1883 _delay_time:
      00030D AC 82            [24] 1884 	mov	r4,dpl
      00030F AD 83            [24] 1885 	mov	r5,dph
      000311 AE F0            [24] 1886 	mov	r6,b
      000313 FF               [12] 1887 	mov	r7,a
                           000314  1888 	C$i2c.h$192$1$86 ==.
                                   1889 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1890 	mov	r0,#0x00
      000316 79 00            [12] 1891 	mov	r1,#0x00
      000318 7A 00            [12] 1892 	mov	r2,#0x00
      00031A 7B 00            [12] 1893 	mov	r3,#0x00
      00031C                       1894 00103$:
      00031C C3               [12] 1895 	clr	c
      00031D E8               [12] 1896 	mov	a,r0
      00031E 9C               [12] 1897 	subb	a,r4
      00031F E9               [12] 1898 	mov	a,r1
      000320 9D               [12] 1899 	subb	a,r5
      000321 EA               [12] 1900 	mov	a,r2
      000322 9E               [12] 1901 	subb	a,r6
      000323 EB               [12] 1902 	mov	a,r3
      000324 9F               [12] 1903 	subb	a,r7
      000325 50 0F            [24] 1904 	jnc	00105$
      000327 08               [12] 1905 	inc	r0
      000328 B8 00 09         [24] 1906 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1907 	inc	r1
      00032C B9 00 05         [24] 1908 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1909 	inc	r2
      000330 BA 00 E9         [24] 1910 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1911 	inc	r3
      000334                       1912 00115$:
      000334 80 E6            [24] 1913 	sjmp	00103$
      000336                       1914 00105$:
                           000336  1915 	C$i2c.h$193$1$86 ==.
                           000336  1916 	XG$delay_time$0$0 ==.
      000336 22               [24] 1917 	ret
                                   1918 ;------------------------------------------------------------
                                   1919 ;Allocation info for local variables in function 'i2c_start'
                                   1920 ;------------------------------------------------------------
                           000337  1921 	G$i2c_start$0$0 ==.
                           000337  1922 	C$i2c.h$196$1$86 ==.
                                   1923 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1924 ;	-----------------------------------------
                                   1925 ;	 function i2c_start
                                   1926 ;	-----------------------------------------
      000337                       1927 _i2c_start:
                           000337  1928 	C$i2c.h$198$1$88 ==.
                                   1929 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1930 00101$:
      000337 20 C7 FD         [24] 1931 	jb	_BUSY,00101$
                           00033A  1932 	C$i2c.h$199$1$88 ==.
                                   1933 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1934 	setb	_STA
                           00033C  1935 	C$i2c.h$200$1$88 ==.
                                   1936 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1937 00104$:
      00033C 30 C3 FD         [24] 1938 	jnb	_SI,00104$
                           00033F  1939 	C$i2c.h$201$1$88 ==.
                                   1940 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1941 	clr	_STA
                           000341  1942 	C$i2c.h$202$1$88 ==.
                                   1943 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1944 	clr	_SI
                           000343  1945 	C$i2c.h$203$1$88 ==.
                           000343  1946 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1947 	ret
                                   1948 ;------------------------------------------------------------
                                   1949 ;Allocation info for local variables in function 'i2c_write'
                                   1950 ;------------------------------------------------------------
                                   1951 ;output_data               Allocated to registers 
                                   1952 ;------------------------------------------------------------
                           000344  1953 	G$i2c_write$0$0 ==.
                           000344  1954 	C$i2c.h$206$1$88 ==.
                                   1955 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1956 ;	-----------------------------------------
                                   1957 ;	 function i2c_write
                                   1958 ;	-----------------------------------------
      000344                       1959 _i2c_write:
      000344 85 82 C2         [24] 1960 	mov	_SMB0DAT,dpl
                           000347  1961 	C$i2c.h$209$1$90 ==.
                                   1962 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1963 00101$:
                           000347  1964 	C$i2c.h$210$1$90 ==.
                                   1965 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1966 	jbc	_SI,00112$
      00034A 80 FB            [24] 1967 	sjmp	00101$
      00034C                       1968 00112$:
                           00034C  1969 	C$i2c.h$211$1$90 ==.
                           00034C  1970 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1971 	ret
                                   1972 ;------------------------------------------------------------
                                   1973 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1974 ;------------------------------------------------------------
                                   1975 ;output_data               Allocated to registers 
                                   1976 ;------------------------------------------------------------
                           00034D  1977 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1978 	C$i2c.h$214$1$90 ==.
                                   1979 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1980 ;	-----------------------------------------
                                   1981 ;	 function i2c_write_and_stop
                                   1982 ;	-----------------------------------------
      00034D                       1983 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 1984 	mov	_SMB0DAT,dpl
                           000350  1985 	C$i2c.h$217$1$92 ==.
                                   1986 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 1987 	setb	_STO
                           000352  1988 	C$i2c.h$218$1$92 ==.
                                   1989 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       1990 00101$:
                           000352  1991 	C$i2c.h$219$1$92 ==.
                                   1992 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 1993 	jbc	_SI,00112$
      000355 80 FB            [24] 1994 	sjmp	00101$
      000357                       1995 00112$:
                           000357  1996 	C$i2c.h$220$1$92 ==.
                           000357  1997 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 1998 	ret
                                   1999 ;------------------------------------------------------------
                                   2000 ;Allocation info for local variables in function 'i2c_read'
                                   2001 ;------------------------------------------------------------
                                   2002 ;input_data                Allocated to registers 
                                   2003 ;------------------------------------------------------------
                           000358  2004 	G$i2c_read$0$0 ==.
                           000358  2005 	C$i2c.h$223$1$92 ==.
                                   2006 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2007 ;	-----------------------------------------
                                   2008 ;	 function i2c_read
                                   2009 ;	-----------------------------------------
      000358                       2010 _i2c_read:
                           000358  2011 	C$i2c.h$226$1$94 ==.
                                   2012 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2013 00101$:
      000358 30 C3 FD         [24] 2014 	jnb	_SI,00101$
                           00035B  2015 	C$i2c.h$227$1$94 ==.
                                   2016 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2017 	mov	dpl,_SMB0DAT
                           00035E  2018 	C$i2c.h$228$1$94 ==.
                                   2019 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2020 	clr	_SI
                           000360  2021 	C$i2c.h$229$1$94 ==.
                                   2022 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2023 	C$i2c.h$230$1$94 ==.
                           000360  2024 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2025 	ret
                                   2026 ;------------------------------------------------------------
                                   2027 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2028 ;------------------------------------------------------------
                                   2029 ;input_data                Allocated to registers r7 
                                   2030 ;------------------------------------------------------------
                           000361  2031 	G$i2c_read_and_stop$0$0 ==.
                           000361  2032 	C$i2c.h$233$1$94 ==.
                                   2033 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2034 ;	-----------------------------------------
                                   2035 ;	 function i2c_read_and_stop
                                   2036 ;	-----------------------------------------
      000361                       2037 _i2c_read_and_stop:
                           000361  2038 	C$i2c.h$236$1$96 ==.
                                   2039 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2040 00101$:
      000361 30 C3 FD         [24] 2041 	jnb	_SI,00101$
                           000364  2042 	C$i2c.h$237$1$96 ==.
                                   2043 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2044 	mov	r7,_SMB0DAT
                           000366  2045 	C$i2c.h$238$1$96 ==.
                                   2046 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2047 	clr	_SI
                           000368  2048 	C$i2c.h$239$1$96 ==.
                                   2049 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2050 	setb	_STO
                           00036A  2051 	C$i2c.h$240$1$96 ==.
                                   2052 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2053 00104$:
                           00036A  2054 	C$i2c.h$241$1$96 ==.
                                   2055 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2056 	jbc	_SI,00122$
      00036D 80 FB            [24] 2057 	sjmp	00104$
      00036F                       2058 00122$:
                           00036F  2059 	C$i2c.h$242$1$96 ==.
                                   2060 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2061 	mov	dpl,r7
                           000371  2062 	C$i2c.h$243$1$96 ==.
                           000371  2063 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2064 	ret
                                   2065 ;------------------------------------------------------------
                                   2066 ;Allocation info for local variables in function 'i2c_write_data'
                                   2067 ;------------------------------------------------------------
                                   2068 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2069 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2070 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2071 ;addr                      Allocated to registers r7 
                                   2072 ;i                         Allocated to registers 
                                   2073 ;------------------------------------------------------------
                           000372  2074 	G$i2c_write_data$0$0 ==.
                           000372  2075 	C$i2c.h$246$1$96 ==.
                                   2076 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2077 ;	-----------------------------------------
                                   2078 ;	 function i2c_write_data
                                   2079 ;	-----------------------------------------
      000372                       2080 _i2c_write_data:
      000372 AF 82            [24] 2081 	mov	r7,dpl
                           000374  2082 	C$i2c.h$250$1$98 ==.
                                   2083 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2084 	push	ar7
      000376 12r03r37         [24] 2085 	lcall	_i2c_start
      000379 D0 07            [24] 2086 	pop	ar7
                           00037B  2087 	C$i2c.h$251$1$98 ==.
                                   2088 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2089 	mov	a,#0xFE
      00037D 5F               [12] 2090 	anl	a,r7
      00037E F5 82            [12] 2091 	mov	dpl,a
      000380 12r03r44         [24] 2092 	lcall	_i2c_write
                           000383  2093 	C$i2c.h$252$1$98 ==.
                                   2094 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2095 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2096 	lcall	_i2c_write
                           000389  2097 	C$i2c.h$253$1$98 ==.
                                   2098 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2099 	mov	r7,#0x00
      00038B                       2100 00103$:
      00038B AD*09            [24] 2101 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2102 	mov	r6,#0x00
      00038F 1D               [12] 2103 	dec	r5
      000390 BD FF 01         [24] 2104 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2105 	dec	r6
      000394                       2106 00114$:
      000394 8F 03            [24] 2107 	mov	ar3,r7
      000396 7C 00            [12] 2108 	mov	r4,#0x00
      000398 C3               [12] 2109 	clr	c
      000399 EB               [12] 2110 	mov	a,r3
      00039A 9D               [12] 2111 	subb	a,r5
      00039B EC               [12] 2112 	mov	a,r4
      00039C 64 80            [12] 2113 	xrl	a,#0x80
      00039E 8E F0            [24] 2114 	mov	b,r6
      0003A0 63 F0 80         [24] 2115 	xrl	b,#0x80
      0003A3 95 F0            [12] 2116 	subb	a,b
      0003A5 50 1F            [24] 2117 	jnc	00101$
                           0003A7  2118 	C$i2c.h$254$1$98 ==.
                                   2119 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2120 	mov	a,r7
      0003A8 25*06            [12] 2121 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2122 	mov	r4,a
      0003AB E4               [12] 2123 	clr	a
      0003AC 35*07            [12] 2124 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2125 	mov	r5,a
      0003AF AE*08            [24] 2126 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2127 	mov	dpl,r4
      0003B3 8D 83            [24] 2128 	mov	dph,r5
      0003B5 8E F0            [24] 2129 	mov	b,r6
      0003B7 12r00r00         [24] 2130 	lcall	__gptrget
      0003BA F5 82            [12] 2131 	mov	dpl,a
      0003BC C0 07            [24] 2132 	push	ar7
      0003BE 12r03r44         [24] 2133 	lcall	_i2c_write
      0003C1 D0 07            [24] 2134 	pop	ar7
                           0003C3  2135 	C$i2c.h$253$1$98 ==.
                                   2136 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2137 	inc	r7
      0003C4 80 C5            [24] 2138 	sjmp	00103$
      0003C6                       2139 00101$:
                           0003C6  2140 	C$i2c.h$255$1$98 ==.
                                   2141 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2142 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2143 	mov	r7,#0x00
      0003CA 1E               [12] 2144 	dec	r6
      0003CB BE FF 01         [24] 2145 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2146 	dec	r7
      0003CF                       2147 00116$:
      0003CF EE               [12] 2148 	mov	a,r6
      0003D0 25*06            [12] 2149 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2150 	mov	r6,a
      0003D3 EF               [12] 2151 	mov	a,r7
      0003D4 35*07            [12] 2152 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2153 	mov	r7,a
      0003D7 AD*08            [24] 2154 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2155 	mov	dpl,r6
      0003DB 8F 83            [24] 2156 	mov	dph,r7
      0003DD 8D F0            [24] 2157 	mov	b,r5
      0003DF 12r00r00         [24] 2158 	lcall	__gptrget
      0003E2 F5 82            [12] 2159 	mov	dpl,a
      0003E4 12r03r4D         [24] 2160 	lcall	_i2c_write_and_stop
                           0003E7  2161 	C$i2c.h$256$1$98 ==.
                           0003E7  2162 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2163 	ret
                                   2164 ;------------------------------------------------------------
                                   2165 ;Allocation info for local variables in function 'i2c_read_data'
                                   2166 ;------------------------------------------------------------
                                   2167 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2168 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2169 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2170 ;addr                      Allocated to registers r7 
                                   2171 ;j                         Allocated to registers 
                                   2172 ;------------------------------------------------------------
                           0003E8  2173 	G$i2c_read_data$0$0 ==.
                           0003E8  2174 	C$i2c.h$259$1$98 ==.
                                   2175 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2176 ;	-----------------------------------------
                                   2177 ;	 function i2c_read_data
                                   2178 ;	-----------------------------------------
      0003E8                       2179 _i2c_read_data:
      0003E8 AF 82            [24] 2180 	mov	r7,dpl
                           0003EA  2181 	C$i2c.h$262$1$100 ==.
                                   2182 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2183 	push	ar7
      0003EC 12r03r37         [24] 2184 	lcall	_i2c_start
      0003EF D0 07            [24] 2185 	pop	ar7
                           0003F1  2186 	C$i2c.h$263$1$100 ==.
                                   2187 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2188 	mov	ar6,r7
      0003F3 74 FE            [12] 2189 	mov	a,#0xFE
      0003F5 5E               [12] 2190 	anl	a,r6
      0003F6 F5 82            [12] 2191 	mov	dpl,a
      0003F8 C0 07            [24] 2192 	push	ar7
      0003FA 12r03r44         [24] 2193 	lcall	_i2c_write
                           0003FD  2194 	C$i2c.h$264$1$100 ==.
                                   2195 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2196 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2197 	lcall	_i2c_write_and_stop
                           000403  2198 	C$i2c.h$265$1$100 ==.
                                   2199 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2200 	lcall	_i2c_start
      000406 D0 07            [24] 2201 	pop	ar7
                           000408  2202 	C$i2c.h$266$1$100 ==.
                                   2203 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2204 	mov	a,#0x01
      00040A 4F               [12] 2205 	orl	a,r7
      00040B F5 82            [12] 2206 	mov	dpl,a
      00040D 12r03r44         [24] 2207 	lcall	_i2c_write
                           000410  2208 	C$i2c.h$267$1$100 ==.
                                   2209 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2210 	mov	r7,#0x00
      000412                       2211 00103$:
      000412 AD*0E            [24] 2212 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2213 	mov	r6,#0x00
      000416 1D               [12] 2214 	dec	r5
      000417 BD FF 01         [24] 2215 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2216 	dec	r6
      00041B                       2217 00114$:
      00041B 8F 03            [24] 2218 	mov	ar3,r7
      00041D 7C 00            [12] 2219 	mov	r4,#0x00
      00041F C3               [12] 2220 	clr	c
      000420 EB               [12] 2221 	mov	a,r3
      000421 9D               [12] 2222 	subb	a,r5
      000422 EC               [12] 2223 	mov	a,r4
      000423 64 80            [12] 2224 	xrl	a,#0x80
      000425 8E F0            [24] 2225 	mov	b,r6
      000427 63 F0 80         [24] 2226 	xrl	b,#0x80
      00042A 95 F0            [12] 2227 	subb	a,b
      00042C 50 2E            [24] 2228 	jnc	00101$
                           00042E  2229 	C$i2c.h$269$2$101 ==.
                                   2230 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2231 	setb	_AA
                           000430  2232 	C$i2c.h$270$2$101 ==.
                                   2233 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2234 	mov	a,r7
      000431 25*0B            [12] 2235 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2236 	mov	r4,a
      000434 E4               [12] 2237 	clr	a
      000435 35*0C            [12] 2238 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2239 	mov	r5,a
      000438 AE*0D            [24] 2240 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2241 	push	ar7
      00043C C0 06            [24] 2242 	push	ar6
      00043E C0 05            [24] 2243 	push	ar5
      000440 C0 04            [24] 2244 	push	ar4
      000442 12r03r58         [24] 2245 	lcall	_i2c_read
      000445 AB 82            [24] 2246 	mov	r3,dpl
      000447 D0 04            [24] 2247 	pop	ar4
      000449 D0 05            [24] 2248 	pop	ar5
      00044B D0 06            [24] 2249 	pop	ar6
      00044D D0 07            [24] 2250 	pop	ar7
      00044F 8C 82            [24] 2251 	mov	dpl,r4
      000451 8D 83            [24] 2252 	mov	dph,r5
      000453 8E F0            [24] 2253 	mov	b,r6
      000455 EB               [12] 2254 	mov	a,r3
      000456 12r00r00         [24] 2255 	lcall	__gptrput
                           000459  2256 	C$i2c.h$267$1$100 ==.
                                   2257 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2258 	inc	r7
      00045A 80 B6            [24] 2259 	sjmp	00103$
      00045C                       2260 00101$:
                           00045C  2261 	C$i2c.h$272$1$100 ==.
                                   2262 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2263 	clr	_AA
                           00045E  2264 	C$i2c.h$273$1$100 ==.
                                   2265 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2266 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2267 	mov	r7,#0x00
      000462 1E               [12] 2268 	dec	r6
      000463 BE FF 01         [24] 2269 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2270 	dec	r7
      000467                       2271 00116$:
      000467 EE               [12] 2272 	mov	a,r6
      000468 25*0B            [12] 2273 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2274 	mov	r6,a
      00046B EF               [12] 2275 	mov	a,r7
      00046C 35*0C            [12] 2276 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2277 	mov	r7,a
      00046F AD*0D            [24] 2278 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2279 	push	ar7
      000473 C0 06            [24] 2280 	push	ar6
      000475 C0 05            [24] 2281 	push	ar5
      000477 12r03r61         [24] 2282 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2283 	mov	r4,dpl
      00047C D0 05            [24] 2284 	pop	ar5
      00047E D0 06            [24] 2285 	pop	ar6
      000480 D0 07            [24] 2286 	pop	ar7
      000482 8E 82            [24] 2287 	mov	dpl,r6
      000484 8F 83            [24] 2288 	mov	dph,r7
      000486 8D F0            [24] 2289 	mov	b,r5
      000488 EC               [12] 2290 	mov	a,r4
      000489 12r00r00         [24] 2291 	lcall	__gptrput
                           00048C  2292 	C$i2c.h$274$1$100 ==.
                           00048C  2293 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2294 	ret
                                   2295 ;------------------------------------------------------------
                                   2296 ;Allocation info for local variables in function 'Accel_Init'
                                   2297 ;------------------------------------------------------------
                                   2298 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2299 ;------------------------------------------------------------
                           00048D  2300 	G$Accel_Init$0$0 ==.
                           00048D  2301 	C$i2c.h$283$1$100 ==.
                                   2302 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2303 ;	-----------------------------------------
                                   2304 ;	 function Accel_Init
                                   2305 ;	-----------------------------------------
      00048D                       2306 _Accel_Init:
                           00048D  2307 	C$i2c.h$287$1$103 ==.
                                   2308 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2309 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2310 	C$i2c.h$289$1$103 ==.
                                   2311 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2312 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2313 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2314 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2315 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2316 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2317 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2318 	lcall	_i2c_write_data
                           0004A5  2319 	C$i2c.h$290$1$103 ==.
                                   2320 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2321 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2322 	C$i2c.h$292$1$103 ==.
                                   2323 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2324 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2325 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2326 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2327 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2328 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2329 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2330 	lcall	_i2c_write_data
                           0004BD  2331 	C$i2c.h$293$1$103 ==.
                                   2332 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2333 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2334 	C$i2c.h$294$1$103 ==.
                                   2335 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2336 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2337 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2338 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2339 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2340 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2341 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2342 	lcall	_i2c_write_data
                           0004D5  2343 	C$i2c.h$298$1$103 ==.
                           0004D5  2344 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2345 	ret
                                   2346 ;------------------------------------------------------------
                                   2347 ;Allocation info for local variables in function 'main'
                                   2348 ;------------------------------------------------------------
                           0004D6  2349 	G$main$0$0 ==.
                           0004D6  2350 	C$Lab4.c$62$1$103 ==.
                                   2351 ;	C:\LITEC\Lab4\Lab4.c:62: void main(void) {
                                   2352 ;	-----------------------------------------
                                   2353 ;	 function main
                                   2354 ;	-----------------------------------------
      0004D6                       2355 _main:
                           0004D6  2356 	C$Lab4.c$64$1$114 ==.
                                   2357 ;	C:\LITEC\Lab4\Lab4.c:64: Sys_Init();
      0004D6 12r00r30         [24] 2358 	lcall	_Sys_Init
                           0004D9  2359 	C$Lab4.c$65$1$114 ==.
                                   2360 ;	C:\LITEC\Lab4\Lab4.c:65: putchar(' '); //the quotes in this line may not format correctly
      0004D9 75 82 20         [24] 2361 	mov	dpl,#0x20
      0004DC 12r00r43         [24] 2362 	lcall	_putchar
                           0004DF  2363 	C$Lab4.c$66$1$114 ==.
                                   2364 ;	C:\LITEC\Lab4\Lab4.c:66: Port_Init();
      0004DF 12r07r2A         [24] 2365 	lcall	_Port_Init
                           0004E2  2366 	C$Lab4.c$67$1$114 ==.
                                   2367 ;	C:\LITEC\Lab4\Lab4.c:67: PCA_Init();
      0004E2 12r07r79         [24] 2368 	lcall	_PCA_Init
                           0004E5  2369 	C$Lab4.c$68$1$114 ==.
                                   2370 ;	C:\LITEC\Lab4\Lab4.c:68: SMB_Init();
      0004E5 12r07r8C         [24] 2371 	lcall	_SMB_Init
                           0004E8  2372 	C$Lab4.c$69$1$114 ==.
                                   2373 ;	C:\LITEC\Lab4\Lab4.c:69: Interrupt_Init();
      0004E8 12r07r86         [24] 2374 	lcall	_Interrupt_Init
                           0004EB  2375 	C$Lab4.c$70$1$114 ==.
                                   2376 ;	C:\LITEC\Lab4\Lab4.c:70: printf("Starting\n\r");
      0004EB 74r29            [12] 2377 	mov	a,#___str_3
      0004ED C0 E0            [24] 2378 	push	acc
      0004EF 74s00            [12] 2379 	mov	a,#(___str_3 >> 8)
      0004F1 C0 E0            [24] 2380 	push	acc
      0004F3 74 80            [12] 2381 	mov	a,#0x80
      0004F5 C0 E0            [24] 2382 	push	acc
      0004F7 12r00r00         [24] 2383 	lcall	_printf
      0004FA 15 81            [12] 2384 	dec	sp
      0004FC 15 81            [12] 2385 	dec	sp
      0004FE 15 81            [12] 2386 	dec	sp
                           000500  2387 	C$Lab4.c$73$1$114 ==.
                                   2388 ;	C:\LITEC\Lab4\Lab4.c:73: printf("Embedded Control Drive Motor Control\r\n");
      000500 74r34            [12] 2389 	mov	a,#___str_4
      000502 C0 E0            [24] 2390 	push	acc
      000504 74s00            [12] 2391 	mov	a,#(___str_4 >> 8)
      000506 C0 E0            [24] 2392 	push	acc
      000508 74 80            [12] 2393 	mov	a,#0x80
      00050A C0 E0            [24] 2394 	push	acc
      00050C 12r00r00         [24] 2395 	lcall	_printf
      00050F 15 81            [12] 2396 	dec	sp
      000511 15 81            [12] 2397 	dec	sp
      000513 15 81            [12] 2398 	dec	sp
                           000515  2399 	C$Lab4.c$75$1$114 ==.
                                   2400 ;	C:\LITEC\Lab4\Lab4.c:75: MOTOR_PW = MOTOR_PW_NEUT;
      000515 75*1F C8         [24] 2401 	mov	_MOTOR_PW,#0xC8
      000518 75*20 0A         [24] 2402 	mov	(_MOTOR_PW + 1),#0x0A
                           00051B  2403 	C$Lab4.c$76$1$114 ==.
                                   2404 ;	C:\LITEC\Lab4\Lab4.c:76: motor_PW = 0xFFFF - MOTOR_PW;
      00051B 75*2A 37         [24] 2405 	mov	_motor_PW,#0x37
      00051E 75*2B F5         [24] 2406 	mov	(_motor_PW + 1),#0xF5
                           000521  2407 	C$Lab4.c$77$1$114 ==.
                                   2408 ;	C:\LITEC\Lab4\Lab4.c:77: PCA0CPL2 = motor_PW;
      000521 75 EC 37         [24] 2409 	mov	_PCA0CPL2,#0x37
                           000524  2410 	C$Lab4.c$78$1$114 ==.
                                   2411 ;	C:\LITEC\Lab4\Lab4.c:78: PCA0CPH2 = motor_PW >> 8;
      000524 75 FC F5         [24] 2412 	mov	_PCA0CPH2,#0xF5
                           000527  2413 	C$Lab4.c$79$1$114 ==.
                                   2414 ;	C:\LITEC\Lab4\Lab4.c:79: printf("Pulse Width = %d\r\n", MOTOR_PW);
      000527 74 C8            [12] 2415 	mov	a,#0xC8
      000529 C0 E0            [24] 2416 	push	acc
      00052B 74 0A            [12] 2417 	mov	a,#0x0A
      00052D C0 E0            [24] 2418 	push	acc
      00052F 74r5B            [12] 2419 	mov	a,#___str_5
      000531 C0 E0            [24] 2420 	push	acc
      000533 74s00            [12] 2421 	mov	a,#(___str_5 >> 8)
      000535 C0 E0            [24] 2422 	push	acc
      000537 74 80            [12] 2423 	mov	a,#0x80
      000539 C0 E0            [24] 2424 	push	acc
      00053B 12r00r00         [24] 2425 	lcall	_printf
      00053E E5 81            [12] 2426 	mov	a,sp
      000540 24 FB            [12] 2427 	add	a,#0xfb
      000542 F5 81            [12] 2428 	mov	sp,a
                           000544  2429 	C$Lab4.c$80$1$114 ==.
                                   2430 ;	C:\LITEC\Lab4\Lab4.c:80: c = 0;
      000544 E4               [12] 2431 	clr	a
      000545 F5*21            [12] 2432 	mov	_c,a
      000547 F5*22            [12] 2433 	mov	(_c + 1),a
                           000549  2434 	C$Lab4.c$81$1$114 ==.
                                   2435 ;	C:\LITEC\Lab4\Lab4.c:81: while (c < 50); //wait 1 second in neutral
      000549                       2436 00101$:
      000549 C3               [12] 2437 	clr	c
      00054A E5*21            [12] 2438 	mov	a,_c
      00054C 94 32            [12] 2439 	subb	a,#0x32
      00054E E5*22            [12] 2440 	mov	a,(_c + 1)
      000550 94 00            [12] 2441 	subb	a,#0x00
      000552 40 F5            [24] 2442 	jc	00101$
                           000554  2443 	C$Lab4.c$82$1$114 ==.
                                   2444 ;	C:\LITEC\Lab4\Lab4.c:82: printf("end wait \r\n");
      000554 74r6E            [12] 2445 	mov	a,#___str_6
      000556 C0 E0            [24] 2446 	push	acc
      000558 74s00            [12] 2447 	mov	a,#(___str_6 >> 8)
      00055A C0 E0            [24] 2448 	push	acc
      00055C 74 80            [12] 2449 	mov	a,#0x80
      00055E C0 E0            [24] 2450 	push	acc
      000560 12r00r00         [24] 2451 	lcall	_printf
      000563 15 81            [12] 2452 	dec	sp
      000565 15 81            [12] 2453 	dec	sp
      000567 15 81            [12] 2454 	dec	sp
                           000569  2455 	C$Lab4.c$87$1$114 ==.
                                   2456 ;	C:\LITEC\Lab4\Lab4.c:87: while (1) {
      000569                       2457 00115$:
                           000569  2458 	C$Lab4.c$88$2$115 ==.
                                   2459 ;	C:\LITEC\Lab4\Lab4.c:88: if (!SS_steer) { // If the slide switch is active, set PW to center
      000569 20 B7 0F         [24] 2460 	jb	_SS_steer,00107$
                           00056C  2461 	C$Lab4.c$90$3$116 ==.
                                   2462 ;	C:\LITEC\Lab4\Lab4.c:90: PCA0CP0 = 0xFFFF - servo_PW; // Update comparator with new PW value
      00056C 74 FF            [12] 2463 	mov	a,#0xFF
      00056E C3               [12] 2464 	clr	c
      00056F 95*1A            [12] 2465 	subb	a,_servo_PW
      000571 F5 EA            [12] 2466 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000573 74 FF            [12] 2467 	mov	a,#0xFF
      000575 95*1B            [12] 2468 	subb	a,(_servo_PW + 1)
      000577 F5 FA            [12] 2469 	mov	((_PCA0CP0 >> 8) & 0xFF),a
      000579 80 3C            [24] 2470 	sjmp	00108$
      00057B                       2471 00107$:
                           00057B  2472 	C$Lab4.c$91$2$115 ==.
                                   2473 ;	C:\LITEC\Lab4\Lab4.c:91: } else if (take_heading) { // Otherwise take a new heading
      00057B E5*11            [12] 2474 	mov	a,_take_heading
      00057D 60 38            [24] 2475 	jz	00108$
                           00057F  2476 	C$Lab4.c$92$3$117 ==.
                                   2477 ;	C:\LITEC\Lab4\Lab4.c:92: reading = Read_Compass(); // Get current heading
      00057F 12r06r2B         [24] 2478 	lcall	_Read_Compass
      000582 85 82*12         [24] 2479 	mov	_reading,dpl
      000585 85 83*13         [24] 2480 	mov	(_reading + 1),dph
                           000588  2481 	C$Lab4.c$93$3$117 ==.
                                   2482 ;	C:\LITEC\Lab4\Lab4.c:93: printf("%d\n\r", reading);
      000588 C0*12            [24] 2483 	push	_reading
      00058A C0*13            [24] 2484 	push	(_reading + 1)
      00058C 74r7A            [12] 2485 	mov	a,#___str_7
      00058E C0 E0            [24] 2486 	push	acc
      000590 74s00            [12] 2487 	mov	a,#(___str_7 >> 8)
      000592 C0 E0            [24] 2488 	push	acc
      000594 74 80            [12] 2489 	mov	a,#0x80
      000596 C0 E0            [24] 2490 	push	acc
      000598 12r00r00         [24] 2491 	lcall	_printf
      00059B E5 81            [12] 2492 	mov	a,sp
      00059D 24 FB            [12] 2493 	add	a,#0xfb
      00059F F5 81            [12] 2494 	mov	sp,a
                           0005A1  2495 	C$Lab4.c$94$3$117 ==.
                                   2496 ;	C:\LITEC\Lab4\Lab4.c:94: Steering_Servo(reading); // Change PW based on current heading
      0005A1 85*12 82         [24] 2497 	mov	dpl,_reading
      0005A4 85*13 83         [24] 2498 	mov	dph,(_reading + 1)
      0005A7 12r07rD0         [24] 2499 	lcall	_Steering_Servo
                           0005AA  2500 	C$Lab4.c$95$3$117 ==.
                                   2501 ;	C:\LITEC\Lab4\Lab4.c:95: PCA0CP0 = 0xFFFF - servo_PW; // Update comparator with new PW value
      0005AA 74 FF            [12] 2502 	mov	a,#0xFF
      0005AC C3               [12] 2503 	clr	c
      0005AD 95*1A            [12] 2504 	subb	a,_servo_PW
      0005AF F5 EA            [12] 2505 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      0005B1 74 FF            [12] 2506 	mov	a,#0xFF
      0005B3 95*1B            [12] 2507 	subb	a,(_servo_PW + 1)
      0005B5 F5 FA            [12] 2508 	mov	((_PCA0CP0 >> 8) & 0xFF),a
      0005B7                       2509 00108$:
                           0005B7  2510 	C$Lab4.c$99$2$115 ==.
                                   2511 ;	C:\LITEC\Lab4\Lab4.c:99: if (getRange) {
      0005B7 E5*23            [12] 2512 	mov	a,_getRange
      0005B9 60 57            [24] 2513 	jz	00110$
                           0005BB  2514 	C$Lab4.c$100$3$118 ==.
                                   2515 ;	C:\LITEC\Lab4\Lab4.c:100: getRange = 0; // Reset 80 ms flag
      0005BB 75*23 00         [24] 2516 	mov	_getRange,#0x00
                           0005BE  2517 	C$Lab4.c$101$3$118 ==.
                                   2518 ;	C:\LITEC\Lab4\Lab4.c:101: range_val = read_ranger(); // Read the distance from the ranger
      0005BE 12r07r04         [24] 2519 	lcall	_read_ranger
      0005C1 AF 82            [24] 2520 	mov	r7,dpl
      0005C3 8F*25            [24] 2521 	mov	_range_val,r7
      0005C5 75*26 00         [24] 2522 	mov	(_range_val + 1),#0x00
                           0005C8  2523 	C$Lab4.c$102$3$118 ==.
                                   2524 ;	C:\LITEC\Lab4\Lab4.c:102: printf("Range:			%d cm \r\n", range_val);
      0005C8 C0*25            [24] 2525 	push	_range_val
      0005CA C0*26            [24] 2526 	push	(_range_val + 1)
      0005CC 74r7F            [12] 2527 	mov	a,#___str_8
      0005CE C0 E0            [24] 2528 	push	acc
      0005D0 74s00            [12] 2529 	mov	a,#(___str_8 >> 8)
      0005D2 C0 E0            [24] 2530 	push	acc
      0005D4 74 80            [12] 2531 	mov	a,#0x80
      0005D6 C0 E0            [24] 2532 	push	acc
      0005D8 12r00r00         [24] 2533 	lcall	_printf
      0005DB E5 81            [12] 2534 	mov	a,sp
      0005DD 24 FB            [12] 2535 	add	a,#0xfb
      0005DF F5 81            [12] 2536 	mov	sp,a
                           0005E1  2537 	C$Lab4.c$103$3$118 ==.
                                   2538 ;	C:\LITEC\Lab4\Lab4.c:103: printf("Pulse Width:	%d \r\n", MOTOR_PW);
      0005E1 C0*1F            [24] 2539 	push	_MOTOR_PW
      0005E3 C0*20            [24] 2540 	push	(_MOTOR_PW + 1)
      0005E5 74r91            [12] 2541 	mov	a,#___str_9
      0005E7 C0 E0            [24] 2542 	push	acc
      0005E9 74s00            [12] 2543 	mov	a,#(___str_9 >> 8)
      0005EB C0 E0            [24] 2544 	push	acc
      0005ED 74 80            [12] 2545 	mov	a,#0x80
      0005EF C0 E0            [24] 2546 	push	acc
      0005F1 12r00r00         [24] 2547 	lcall	_printf
      0005F4 E5 81            [12] 2548 	mov	a,sp
      0005F6 24 FB            [12] 2549 	add	a,#0xfb
      0005F8 F5 81            [12] 2550 	mov	sp,a
                           0005FA  2551 	C$Lab4.c$106$3$118 ==.
                                   2552 ;	C:\LITEC\Lab4\Lab4.c:106: Data[0] = 0x51; // write 0x51 to reg 0 of the ranger:
      0005FA 75*27 51         [24] 2553 	mov	_Data,#0x51
                           0005FD  2554 	C$Lab4.c$107$3$118 ==.
                                   2555 ;	C:\LITEC\Lab4\Lab4.c:107: i2c_write_data(addr, 0, Data, 1); // write one byte of data to reg 0 at addr
      0005FD 75*06r27         [24] 2556 	mov	_i2c_write_data_PARM_3,#_Data
      000600 75*07 00         [24] 2557 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000603 75*08 40         [24] 2558 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000606 75*05 00         [24] 2559 	mov	_i2c_write_data_PARM_2,#0x00
      000609 75*09 01         [24] 2560 	mov	_i2c_write_data_PARM_4,#0x01
      00060C 85*29 82         [24] 2561 	mov	dpl,_addr
      00060F 12r03r72         [24] 2562 	lcall	_i2c_write_data
      000612                       2563 00110$:
                           000612  2564 	C$Lab4.c$110$2$115 ==.
                                   2565 ;	C:\LITEC\Lab4\Lab4.c:110: if (!SS_range) Drive_Motor(range_val);
      000612 20 B6 0C         [24] 2566 	jb	_SS_range,00112$
      000615 85*25 82         [24] 2567 	mov	dpl,_range_val
      000618 85*26 83         [24] 2568 	mov	dph,(_range_val + 1)
      00061B 12r06r53         [24] 2569 	lcall	_Drive_Motor
      00061E 02r05r69         [24] 2570 	ljmp	00115$
      000621                       2571 00112$:
                           000621  2572 	C$Lab4.c$111$2$115 ==.
                                   2573 ;	C:\LITEC\Lab4\Lab4.c:111: else Drive_Motor(45); // Hold the motor in neutral if the slide switch is off
      000621 90 00 2D         [24] 2574 	mov	dptr,#0x002D
      000624 12r06r53         [24] 2575 	lcall	_Drive_Motor
      000627 02r05r69         [24] 2576 	ljmp	00115$
                           00062A  2577 	C$Lab4.c$113$1$114 ==.
                           00062A  2578 	XG$main$0$0 ==.
      00062A 22               [24] 2579 	ret
                                   2580 ;------------------------------------------------------------
                                   2581 ;Allocation info for local variables in function 'Read_Compass'
                                   2582 ;------------------------------------------------------------
                                   2583 ;addr                      Allocated to registers 
                                   2584 ;Data                      Allocated with name '_Read_Compass_Data_1_119'
                                   2585 ;heading                   Allocated to registers 
                                   2586 ;------------------------------------------------------------
                           00062B  2587 	G$Read_Compass$0$0 ==.
                           00062B  2588 	C$Lab4.c$121$1$114 ==.
                                   2589 ;	C:\LITEC\Lab4\Lab4.c:121: unsigned int Read_Compass() {
                                   2590 ;	-----------------------------------------
                                   2591 ;	 function Read_Compass
                                   2592 ;	-----------------------------------------
      00062B                       2593 _Read_Compass:
                           00062B  2594 	C$Lab4.c$125$1$119 ==.
                                   2595 ;	C:\LITEC\Lab4\Lab4.c:125: i2c_read_data(addr, 2, Data, 2); // Read data from compass registers, store it in Data buffer
      00062B 75*0Br2C         [24] 2596 	mov	_i2c_read_data_PARM_3,#_Read_Compass_Data_1_119
      00062E 75*0C 00         [24] 2597 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000631 75*0D 40         [24] 2598 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000634 75*0A 02         [24] 2599 	mov	_i2c_read_data_PARM_2,#0x02
      000637 75*0E 02         [24] 2600 	mov	_i2c_read_data_PARM_4,#0x02
      00063A 75 82 C0         [24] 2601 	mov	dpl,#0xC0
      00063D 12r03rE8         [24] 2602 	lcall	_i2c_read_data
                           000640  2603 	C$Lab4.c$126$1$119 ==.
                                   2604 ;	C:\LITEC\Lab4\Lab4.c:126: heading = (((unsigned int) Data[0] << 8) | Data[1]); //Take high data byte, convert to int, 
      000640 AF*2C            [24] 2605 	mov	r7,_Read_Compass_Data_1_119
      000642 7E 00            [12] 2606 	mov	r6,#0x00
      000644 AC*2D            [24] 2607 	mov	r4,(_Read_Compass_Data_1_119 + 0x0001)
      000646 7D 00            [12] 2608 	mov	r5,#0x00
      000648 EC               [12] 2609 	mov	a,r4
      000649 4E               [12] 2610 	orl	a,r6
      00064A F5 82            [12] 2611 	mov	dpl,a
      00064C ED               [12] 2612 	mov	a,r5
      00064D 4F               [12] 2613 	orl	a,r7
      00064E F5 83            [12] 2614 	mov	dph,a
                           000650  2615 	C$Lab4.c$128$1$119 ==.
                                   2616 ;	C:\LITEC\Lab4\Lab4.c:128: take_heading = 0;
                                   2617 ;	1-genFromRTrack replaced	mov	_take_heading,#0x00
      000650 8E*11            [24] 2618 	mov	_take_heading,r6
                           000652  2619 	C$Lab4.c$129$1$119 ==.
                                   2620 ;	C:\LITEC\Lab4\Lab4.c:129: return heading; // Return data heading between 0 and 3599 
                           000652  2621 	C$Lab4.c$130$1$119 ==.
                           000652  2622 	XG$Read_Compass$0$0 ==.
      000652 22               [24] 2623 	ret
                                   2624 ;------------------------------------------------------------
                                   2625 ;Allocation info for local variables in function 'Drive_Motor'
                                   2626 ;------------------------------------------------------------
                                   2627 ;input                     Allocated to registers r6 r7 
                                   2628 ;motorPW                   Allocated to registers r6 r7 
                                   2629 ;------------------------------------------------------------
                           000653  2630 	G$Drive_Motor$0$0 ==.
                           000653  2631 	C$Lab4.c$141$1$119 ==.
                                   2632 ;	C:\LITEC\Lab4\Lab4.c:141: void Drive_Motor(unsigned int input) {
                                   2633 ;	-----------------------------------------
                                   2634 ;	 function Drive_Motor
                                   2635 ;	-----------------------------------------
      000653                       2636 _Drive_Motor:
      000653 AE 82            [24] 2637 	mov	r6,dpl
      000655 AF 83            [24] 2638 	mov	r7,dph
                           000657  2639 	C$Lab4.c$144$1$121 ==.
                                   2640 ;	C:\LITEC\Lab4\Lab4.c:144: if (input <= 10) MOTOR_PW = MOTOR_PW_MAX; // Motor at full forward
      000657 C3               [12] 2641 	clr	c
      000658 74 0A            [12] 2642 	mov	a,#0x0A
      00065A 9E               [12] 2643 	subb	a,r6
      00065B E4               [12] 2644 	clr	a
      00065C 9F               [12] 2645 	subb	a,r7
      00065D 40 09            [24] 2646 	jc	00116$
      00065F 75*1F AC         [24] 2647 	mov	_MOTOR_PW,#0xAC
      000662 75*20 0D         [24] 2648 	mov	(_MOTOR_PW + 1),#0x0D
      000665 02r06rF4         [24] 2649 	ljmp	00117$
      000668                       2650 00116$:
                           000668  2651 	C$Lab4.c$146$1$121 ==.
                                   2652 ;	C:\LITEC\Lab4\Lab4.c:146: else if (input >= 90) MOTOR_PW = MOTOR_PW_MIN; // Motor in full reverse
      000668 C3               [12] 2653 	clr	c
      000669 EE               [12] 2654 	mov	a,r6
      00066A 94 5A            [12] 2655 	subb	a,#0x5A
      00066C EF               [12] 2656 	mov	a,r7
      00066D 94 00            [12] 2657 	subb	a,#0x00
      00066F 40 09            [24] 2658 	jc	00113$
      000671 75*1F EE         [24] 2659 	mov	_MOTOR_PW,#0xEE
      000674 75*20 07         [24] 2660 	mov	(_MOTOR_PW + 1),#0x07
      000677 02r06rF4         [24] 2661 	ljmp	00117$
      00067A                       2662 00113$:
                           00067A  2663 	C$Lab4.c$148$1$121 ==.
                                   2664 ;	C:\LITEC\Lab4\Lab4.c:148: else if (input >= 40 && input <= 50) MOTOR_PW = MOTOR_PW_NEUT; // Motor in neutral
      00067A C3               [12] 2665 	clr	c
      00067B EE               [12] 2666 	mov	a,r6
      00067C 94 28            [12] 2667 	subb	a,#0x28
      00067E EF               [12] 2668 	mov	a,r7
      00067F 94 00            [12] 2669 	subb	a,#0x00
      000681 40 0F            [24] 2670 	jc	00109$
      000683 74 32            [12] 2671 	mov	a,#0x32
      000685 9E               [12] 2672 	subb	a,r6
      000686 E4               [12] 2673 	clr	a
      000687 9F               [12] 2674 	subb	a,r7
      000688 40 08            [24] 2675 	jc	00109$
      00068A 75*1F C8         [24] 2676 	mov	_MOTOR_PW,#0xC8
      00068D 75*20 0A         [24] 2677 	mov	(_MOTOR_PW + 1),#0x0A
      000690 80 62            [24] 2678 	sjmp	00117$
      000692                       2679 00109$:
                           000692  2680 	C$Lab4.c$150$1$121 ==.
                                   2681 ;	C:\LITEC\Lab4\Lab4.c:150: else if (input > 10 && input < 40) MOTOR_PW = ((MOTOR_PW_NEUT - MOTOR_PW_MAX) / 30) * (input - 10) + MOTOR_PW_MAX;
      000692 C3               [12] 2682 	clr	c
      000693 74 0A            [12] 2683 	mov	a,#0x0A
      000695 9E               [12] 2684 	subb	a,r6
      000696 E4               [12] 2685 	clr	a
      000697 9F               [12] 2686 	subb	a,r7
      000698 50 2A            [24] 2687 	jnc	00105$
      00069A C3               [12] 2688 	clr	c
      00069B EE               [12] 2689 	mov	a,r6
      00069C 94 28            [12] 2690 	subb	a,#0x28
      00069E EF               [12] 2691 	mov	a,r7
      00069F 94 00            [12] 2692 	subb	a,#0x00
      0006A1 50 21            [24] 2693 	jnc	00105$
      0006A3 EE               [12] 2694 	mov	a,r6
      0006A4 24 F6            [12] 2695 	add	a,#0xF6
      0006A6 F5*00            [12] 2696 	mov	__mulint_PARM_2,a
      0006A8 EF               [12] 2697 	mov	a,r7
      0006A9 34 FF            [12] 2698 	addc	a,#0xFF
      0006AB F5*01            [12] 2699 	mov	(__mulint_PARM_2 + 1),a
      0006AD 90 FF E8         [24] 2700 	mov	dptr,#0xFFE8
      0006B0 12r00r00         [24] 2701 	lcall	__mulint
      0006B3 E5 82            [12] 2702 	mov	a,dpl
      0006B5 85 83 F0         [24] 2703 	mov	b,dph
      0006B8 24 AC            [12] 2704 	add	a,#0xAC
      0006BA F5*1F            [12] 2705 	mov	_MOTOR_PW,a
      0006BC 74 0D            [12] 2706 	mov	a,#0x0D
      0006BE 35 F0            [12] 2707 	addc	a,b
      0006C0 F5*20            [12] 2708 	mov	(_MOTOR_PW + 1),a
      0006C2 80 30            [24] 2709 	sjmp	00117$
      0006C4                       2710 00105$:
                           0006C4  2711 	C$Lab4.c$152$1$121 ==.
                                   2712 ;	C:\LITEC\Lab4\Lab4.c:152: else if (input > 50 && input < 90) MOTOR_PW = ((MOTOR_PW_MIN - MOTOR_PW_NEUT) / 40) * (input - 50) + MOTOR_PW_NEUT;
      0006C4 C3               [12] 2713 	clr	c
      0006C5 74 32            [12] 2714 	mov	a,#0x32
      0006C7 9E               [12] 2715 	subb	a,r6
      0006C8 E4               [12] 2716 	clr	a
      0006C9 9F               [12] 2717 	subb	a,r7
      0006CA 50 28            [24] 2718 	jnc	00117$
      0006CC C3               [12] 2719 	clr	c
      0006CD EE               [12] 2720 	mov	a,r6
      0006CE 94 5A            [12] 2721 	subb	a,#0x5A
      0006D0 EF               [12] 2722 	mov	a,r7
      0006D1 94 00            [12] 2723 	subb	a,#0x00
      0006D3 50 1F            [24] 2724 	jnc	00117$
      0006D5 EE               [12] 2725 	mov	a,r6
      0006D6 24 CE            [12] 2726 	add	a,#0xCE
      0006D8 F5*00            [12] 2727 	mov	__mulint_PARM_2,a
      0006DA EF               [12] 2728 	mov	a,r7
      0006DB 34 FF            [12] 2729 	addc	a,#0xFF
      0006DD F5*01            [12] 2730 	mov	(__mulint_PARM_2 + 1),a
      0006DF 90 FF EE         [24] 2731 	mov	dptr,#0xFFEE
      0006E2 12r00r00         [24] 2732 	lcall	__mulint
      0006E5 E5 82            [12] 2733 	mov	a,dpl
      0006E7 85 83 F0         [24] 2734 	mov	b,dph
      0006EA 24 C8            [12] 2735 	add	a,#0xC8
      0006EC F5*1F            [12] 2736 	mov	_MOTOR_PW,a
      0006EE 74 0A            [12] 2737 	mov	a,#0x0A
      0006F0 35 F0            [12] 2738 	addc	a,b
      0006F2 F5*20            [12] 2739 	mov	(_MOTOR_PW + 1),a
      0006F4                       2740 00117$:
                           0006F4  2741 	C$Lab4.c$155$1$121 ==.
                                   2742 ;	C:\LITEC\Lab4\Lab4.c:155: motorPW = 0xFFFF - MOTOR_PW;
      0006F4 74 FF            [12] 2743 	mov	a,#0xFF
      0006F6 C3               [12] 2744 	clr	c
      0006F7 95*1F            [12] 2745 	subb	a,_MOTOR_PW
      0006F9 FE               [12] 2746 	mov	r6,a
      0006FA 74 FF            [12] 2747 	mov	a,#0xFF
      0006FC 95*20            [12] 2748 	subb	a,(_MOTOR_PW + 1)
      0006FE FF               [12] 2749 	mov	r7,a
                           0006FF  2750 	C$Lab4.c$156$1$121 ==.
                                   2751 ;	C:\LITEC\Lab4\Lab4.c:156: PCA0CPL2 = motorPW; // Set High and low byte for motor speed
      0006FF 8E EC            [24] 2752 	mov	_PCA0CPL2,r6
                           000701  2753 	C$Lab4.c$157$1$121 ==.
                                   2754 ;	C:\LITEC\Lab4\Lab4.c:157: PCA0CPH2 = motorPW >> 8;
      000701 8F FC            [24] 2755 	mov	_PCA0CPH2,r7
                           000703  2756 	C$Lab4.c$158$1$121 ==.
                           000703  2757 	XG$Drive_Motor$0$0 ==.
      000703 22               [24] 2758 	ret
                                   2759 ;------------------------------------------------------------
                                   2760 ;Allocation info for local variables in function 'read_ranger'
                                   2761 ;------------------------------------------------------------
                                   2762 ;range                     Allocated to registers r6 r7 
                                   2763 ;slave_reg                 Allocated to registers 
                                   2764 ;num_bytes                 Allocated to registers 
                                   2765 ;------------------------------------------------------------
                           000704  2766 	G$read_ranger$0$0 ==.
                           000704  2767 	C$Lab4.c$167$1$121 ==.
                                   2768 ;	C:\LITEC\Lab4\Lab4.c:167: unsigned char read_ranger(void) {
                                   2769 ;	-----------------------------------------
                                   2770 ;	 function read_ranger
                                   2771 ;	-----------------------------------------
      000704                       2772 _read_ranger:
                           000704  2773 	C$Lab4.c$172$1$123 ==.
                                   2774 ;	C:\LITEC\Lab4\Lab4.c:172: i2c_read_data(addr, slave_reg, Data, num_bytes); // read two bytes, starting at reg 2
      000704 75*0Br27         [24] 2775 	mov	_i2c_read_data_PARM_3,#_Data
      000707 75*0C 00         [24] 2776 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00070A 75*0D 40         [24] 2777 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00070D 75*0A 02         [24] 2778 	mov	_i2c_read_data_PARM_2,#0x02
      000710 75*0E 02         [24] 2779 	mov	_i2c_read_data_PARM_4,#0x02
      000713 85*29 82         [24] 2780 	mov	dpl,_addr
      000716 12r03rE8         [24] 2781 	lcall	_i2c_read_data
                           000719  2782 	C$Lab4.c$173$1$123 ==.
                                   2783 ;	C:\LITEC\Lab4\Lab4.c:173: range = (((unsigned int) Data[0] << 8) | Data[1]); // Store high and low bytes of Data in variable range
      000719 AF*27            [24] 2784 	mov	r7,_Data
      00071B 7E 00            [12] 2785 	mov	r6,#0x00
      00071D AC*28            [24] 2786 	mov	r4,(_Data + 0x0001)
      00071F 7D 00            [12] 2787 	mov	r5,#0x00
      000721 EC               [12] 2788 	mov	a,r4
      000722 42 06            [12] 2789 	orl	ar6,a
      000724 ED               [12] 2790 	mov	a,r5
      000725 42 07            [12] 2791 	orl	ar7,a
                           000727  2792 	C$Lab4.c$174$1$123 ==.
                                   2793 ;	C:\LITEC\Lab4\Lab4.c:174: return range;
      000727 8E 82            [24] 2794 	mov	dpl,r6
                           000729  2795 	C$Lab4.c$175$1$123 ==.
                           000729  2796 	XG$read_ranger$0$0 ==.
      000729 22               [24] 2797 	ret
                                   2798 ;------------------------------------------------------------
                                   2799 ;Allocation info for local variables in function 'Port_Init'
                                   2800 ;------------------------------------------------------------
                           00072A  2801 	G$Port_Init$0$0 ==.
                           00072A  2802 	C$Lab4.c$185$1$123 ==.
                                   2803 ;	C:\LITEC\Lab4\Lab4.c:185: void Port_Init() {
                                   2804 ;	-----------------------------------------
                                   2805 ;	 function Port_Init
                                   2806 ;	-----------------------------------------
      00072A                       2807 _Port_Init:
                           00072A  2808 	C$Lab4.c$186$1$124 ==.
                                   2809 ;	C:\LITEC\Lab4\Lab4.c:186: P1MDOUT |= 0x05; // set output pin P1.2 and P1.0 for push-pull mode (CEX2 and CEX0)
      00072A 43 A5 05         [24] 2810 	orl	_P1MDOUT,#0x05
                           00072D  2811 	C$Lab4.c$187$1$124 ==.
                                   2812 ;	C:\LITEC\Lab4\Lab4.c:187: XBR0 = 0x27; // configure crossbar with UART, SPI, SMBus, and CEX channels 
      00072D 75 E1 27         [24] 2813 	mov	_XBR0,#0x27
                           000730  2814 	C$Lab4.c$189$1$124 ==.
                                   2815 ;	C:\LITEC\Lab4\Lab4.c:189: P3MDOUT &= ~0xC0; // Set P3.6 and 3.7 to inputs
      000730 AF A7            [24] 2816 	mov	r7,_P3MDOUT
      000732 74 3F            [12] 2817 	mov	a,#0x3F
      000734 5F               [12] 2818 	anl	a,r7
      000735 F5 A7            [12] 2819 	mov	_P3MDOUT,a
                           000737  2820 	C$Lab4.c$190$1$124 ==.
                                   2821 ;	C:\LITEC\Lab4\Lab4.c:190: P3 |= 0xC0;
      000737 43 B0 C0         [24] 2822 	orl	_P3,#0xC0
                           00073A  2823 	C$Lab4.c$192$1$124 ==.
                                   2824 ;	C:\LITEC\Lab4\Lab4.c:192: P0MDOUT &= ~0xC0; //(00XX XXXX) Set P0.6 and P0.7 Open Drain (Input)
      00073A AF A4            [24] 2825 	mov	r7,_P0MDOUT
      00073C 74 3F            [12] 2826 	mov	a,#0x3F
      00073E 5F               [12] 2827 	anl	a,r7
      00073F F5 A4            [12] 2828 	mov	_P0MDOUT,a
                           000741  2829 	C$Lab4.c$193$1$124 ==.
                                   2830 ;	C:\LITEC\Lab4\Lab4.c:193: P0 |= 0xC0; //(11XX XXXX) Set P0.6 and P0.7 to High-Impedence Mode
      000741 43 80 C0         [24] 2831 	orl	_P0,#0xC0
                           000744  2832 	C$Lab4.c$199$1$124 ==.
                                   2833 ;	C:\LITEC\Lab4\Lab4.c:199: P1MDIN &= ~0x80;
      000744 AF BD            [24] 2834 	mov	r7,_P1MDIN
      000746 74 7F            [12] 2835 	mov	a,#0x7F
      000748 5F               [12] 2836 	anl	a,r7
      000749 F5 BD            [12] 2837 	mov	_P1MDIN,a
                           00074B  2838 	C$Lab4.c$200$1$124 ==.
                                   2839 ;	C:\LITEC\Lab4\Lab4.c:200: P1MDOUT &= ~0x80;
      00074B AF A5            [24] 2840 	mov	r7,_P1MDOUT
      00074D 74 7F            [12] 2841 	mov	a,#0x7F
      00074F 5F               [12] 2842 	anl	a,r7
      000750 F5 A5            [12] 2843 	mov	_P1MDOUT,a
                           000752  2844 	C$Lab4.c$201$1$124 ==.
                                   2845 ;	C:\LITEC\Lab4\Lab4.c:201: P1 |= 0x80;
      000752 43 90 80         [24] 2846 	orl	_P1,#0x80
                           000755  2847 	C$Lab4.c$202$1$124 ==.
                           000755  2848 	XG$Port_Init$0$0 ==.
      000755 22               [24] 2849 	ret
                                   2850 ;------------------------------------------------------------
                                   2851 ;Allocation info for local variables in function 'ADC_Init'
                                   2852 ;------------------------------------------------------------
                           000756  2853 	G$ADC_Init$0$0 ==.
                           000756  2854 	C$Lab4.c$210$1$124 ==.
                                   2855 ;	C:\LITEC\Lab4\Lab4.c:210: void ADC_Init(void) {
                                   2856 ;	-----------------------------------------
                                   2857 ;	 function ADC_Init
                                   2858 ;	-----------------------------------------
      000756                       2859 _ADC_Init:
                           000756  2860 	C$Lab4.c$211$1$126 ==.
                                   2861 ;	C:\LITEC\Lab4\Lab4.c:211: REF0CN = 0x03; // Use internal reference voltage (2.4V)
      000756 75 D1 03         [24] 2862 	mov	_REF0CN,#0x03
                           000759  2863 	C$Lab4.c$212$1$126 ==.
                                   2864 ;	C:\LITEC\Lab4\Lab4.c:212: ADC1CN = 0x80; // Enable A/D conversion
      000759 75 AA 80         [24] 2865 	mov	_ADC1CN,#0x80
                           00075C  2866 	C$Lab4.c$213$1$126 ==.
                                   2867 ;	C:\LITEC\Lab4\Lab4.c:213: ADC1CF &= 0xFC; // Reset last two bits to 0
      00075C 53 AB FC         [24] 2868 	anl	_ADC1CF,#0xFC
                           00075F  2869 	C$Lab4.c$214$1$126 ==.
                                   2870 ;	C:\LITEC\Lab4\Lab4.c:214: ADC1CF |= 0x01; // Gain set to 1.0
      00075F 43 AB 01         [24] 2871 	orl	_ADC1CF,#0x01
                           000762  2872 	C$Lab4.c$215$1$126 ==.
                           000762  2873 	XG$ADC_Init$0$0 ==.
      000762 22               [24] 2874 	ret
                                   2875 ;------------------------------------------------------------
                                   2876 ;Allocation info for local variables in function 'read_AD_input'
                                   2877 ;------------------------------------------------------------
                           000763  2878 	G$read_AD_input$0$0 ==.
                           000763  2879 	C$Lab4.c$223$1$126 ==.
                                   2880 ;	C:\LITEC\Lab4\Lab4.c:223: unsigned char read_AD_input(void) {
                                   2881 ;	-----------------------------------------
                                   2882 ;	 function read_AD_input
                                   2883 ;	-----------------------------------------
      000763                       2884 _read_AD_input:
                           000763  2885 	C$Lab4.c$224$1$128 ==.
                                   2886 ;	C:\LITEC\Lab4\Lab4.c:224: AMX1SL = 7; // Set pin 7 as the analog input
      000763 75 AC 07         [24] 2887 	mov	_AMX1SL,#0x07
                           000766  2888 	C$Lab4.c$225$1$128 ==.
                                   2889 ;	C:\LITEC\Lab4\Lab4.c:225: ADC1CN &= ~0x20; // Clear 'conversion complete' flag
      000766 AF AA            [24] 2890 	mov	r7,_ADC1CN
      000768 74 DF            [12] 2891 	mov	a,#0xDF
      00076A 5F               [12] 2892 	anl	a,r7
      00076B F5 AA            [12] 2893 	mov	_ADC1CN,a
                           00076D  2894 	C$Lab4.c$226$1$128 ==.
                                   2895 ;	C:\LITEC\Lab4\Lab4.c:226: ADC1CN |= 0x10; // Initiate A/D conversion
      00076D 43 AA 10         [24] 2896 	orl	_ADC1CN,#0x10
                           000770  2897 	C$Lab4.c$228$1$128 ==.
                                   2898 ;	C:\LITEC\Lab4\Lab4.c:228: while ((ADC1CN & 0x20) == 0x00); // Wait for conversion to complete
      000770                       2899 00101$:
      000770 E5 AA            [12] 2900 	mov	a,_ADC1CN
      000772 30 E5 FB         [24] 2901 	jnb	acc.5,00101$
                           000775  2902 	C$Lab4.c$230$1$128 ==.
                                   2903 ;	C:\LITEC\Lab4\Lab4.c:230: return ADC1; // Return digital conversion value
      000775 85 9C 82         [24] 2904 	mov	dpl,_ADC1
                           000778  2905 	C$Lab4.c$231$1$128 ==.
                           000778  2906 	XG$read_AD_input$0$0 ==.
      000778 22               [24] 2907 	ret
                                   2908 ;------------------------------------------------------------
                                   2909 ;Allocation info for local variables in function 'PCA_Init'
                                   2910 ;------------------------------------------------------------
                           000779  2911 	G$PCA_Init$0$0 ==.
                           000779  2912 	C$Lab4.c$240$1$128 ==.
                                   2913 ;	C:\LITEC\Lab4\Lab4.c:240: void PCA_Init(void) {
                                   2914 ;	-----------------------------------------
                                   2915 ;	 function PCA_Init
                                   2916 ;	-----------------------------------------
      000779                       2917 _PCA_Init:
                           000779  2918 	C$Lab4.c$244$1$130 ==.
                                   2919 ;	C:\LITEC\Lab4\Lab4.c:244: PCA0MD = 0x81; // enable CF interupt, use SYSCLK/12
      000779 75 D9 81         [24] 2920 	mov	_PCA0MD,#0x81
                           00077C  2921 	C$Lab4.c$245$1$130 ==.
                                   2922 ;	C:\LITEC\Lab4\Lab4.c:245: PCA0CPM2 = 0xC2; // select 16bit PWM, enable positive edge capture, enable pulse width modulation
      00077C 75 DC C2         [24] 2923 	mov	_PCA0CPM2,#0xC2
                           00077F  2924 	C$Lab4.c$246$1$130 ==.
                                   2925 ;	C:\LITEC\Lab4\Lab4.c:246: PCA0CN = 0x40; // enable PCA0 counter
      00077F 75 D8 40         [24] 2926 	mov	_PCA0CN,#0x40
                           000782  2927 	C$Lab4.c$252$1$130 ==.
                                   2928 ;	C:\LITEC\Lab4\Lab4.c:252: PCA0CPM0 = 0xC2; //Use 16bit counter (bit 7)
      000782 75 DA C2         [24] 2929 	mov	_PCA0CPM0,#0xC2
                           000785  2930 	C$Lab4.c$253$1$130 ==.
                           000785  2931 	XG$PCA_Init$0$0 ==.
      000785 22               [24] 2932 	ret
                                   2933 ;------------------------------------------------------------
                                   2934 ;Allocation info for local variables in function 'Interrupt_Init'
                                   2935 ;------------------------------------------------------------
                           000786  2936 	G$Interrupt_Init$0$0 ==.
                           000786  2937 	C$Lab4.c$262$1$130 ==.
                                   2938 ;	C:\LITEC\Lab4\Lab4.c:262: void Interrupt_Init(void) {
                                   2939 ;	-----------------------------------------
                                   2940 ;	 function Interrupt_Init
                                   2941 ;	-----------------------------------------
      000786                       2942 _Interrupt_Init:
                           000786  2943 	C$Lab4.c$264$1$132 ==.
                                   2944 ;	C:\LITEC\Lab4\Lab4.c:264: EIE1 |= 0x08; //Enable PCA0 Interrupt (bit 3) 
      000786 43 E6 08         [24] 2945 	orl	_EIE1,#0x08
                           000789  2946 	C$Lab4.c$265$1$132 ==.
                                   2947 ;	C:\LITEC\Lab4\Lab4.c:265: EA = 1; //Enable global interrupts
      000789 D2 AF            [12] 2948 	setb	_EA
                           00078B  2949 	C$Lab4.c$267$1$132 ==.
                           00078B  2950 	XG$Interrupt_Init$0$0 ==.
      00078B 22               [24] 2951 	ret
                                   2952 ;------------------------------------------------------------
                                   2953 ;Allocation info for local variables in function 'SMB_Init'
                                   2954 ;------------------------------------------------------------
                           00078C  2955 	G$SMB_Init$0$0 ==.
                           00078C  2956 	C$Lab4.c$276$1$132 ==.
                                   2957 ;	C:\LITEC\Lab4\Lab4.c:276: void SMB_Init(void) {
                                   2958 ;	-----------------------------------------
                                   2959 ;	 function SMB_Init
                                   2960 ;	-----------------------------------------
      00078C                       2961 _SMB_Init:
                           00078C  2962 	C$Lab4.c$277$1$134 ==.
                                   2963 ;	C:\LITEC\Lab4\Lab4.c:277: SMB0CR = 0x93; //Configure SCL frequency
      00078C 75 CF 93         [24] 2964 	mov	_SMB0CR,#0x93
                           00078F  2965 	C$Lab4.c$278$1$134 ==.
                                   2966 ;	C:\LITEC\Lab4\Lab4.c:278: SMB0CN = 0x40; //Enable SMBus
      00078F 75 C0 40         [24] 2967 	mov	_SMB0CN,#0x40
                           000792  2968 	C$Lab4.c$282$1$134 ==.
                                   2969 ;	C:\LITEC\Lab4\Lab4.c:282: ENSMB = 1; // Enable SMBus
      000792 D2 C6            [12] 2970 	setb	_ENSMB
                           000794  2971 	C$Lab4.c$283$1$134 ==.
                           000794  2972 	XG$SMB_Init$0$0 ==.
      000794 22               [24] 2973 	ret
                                   2974 ;------------------------------------------------------------
                                   2975 ;Allocation info for local variables in function 'PCA_ISR'
                                   2976 ;------------------------------------------------------------
                           000795  2977 	G$PCA_ISR$0$0 ==.
                           000795  2978 	C$Lab4.c$294$1$134 ==.
                                   2979 ;	C:\LITEC\Lab4\Lab4.c:294: void PCA_ISR(void) __interrupt 9 {//                                                          needs work
                                   2980 ;	-----------------------------------------
                                   2981 ;	 function PCA_ISR
                                   2982 ;	-----------------------------------------
      000795                       2983 _PCA_ISR:
      000795 C0 E0            [24] 2984 	push	acc
      000797 C0 D0            [24] 2985 	push	psw
                           000799  2986 	C$Lab4.c$295$1$136 ==.
                                   2987 ;	C:\LITEC\Lab4\Lab4.c:295: if (CF) { //If an interrupt has occured
      000799 30 DF 2C         [24] 2988 	jnb	_CF,00106$
                           00079C  2989 	C$Lab4.c$296$2$137 ==.
                                   2990 ;	C:\LITEC\Lab4\Lab4.c:296: interrupts++;
      00079C 05*10            [12] 2991 	inc	_interrupts
                           00079E  2992 	C$Lab4.c$297$2$137 ==.
                                   2993 ;	C:\LITEC\Lab4\Lab4.c:297: c++; // counter for initial wait to initialize motor
      00079E 05*21            [12] 2994 	inc	_c
      0007A0 E4               [12] 2995 	clr	a
      0007A1 B5*21 02         [24] 2996 	cjne	a,_c,00119$
      0007A4 05*22            [12] 2997 	inc	(_c + 1)
      0007A6                       2998 00119$:
                           0007A6  2999 	C$Lab4.c$298$2$137 ==.
                                   3000 ;	C:\LITEC\Lab4\Lab4.c:298: rWait++; // counter to set 80ms flag
      0007A6 05*24            [12] 3001 	inc	_rWait
                           0007A8  3002 	C$Lab4.c$299$2$137 ==.
                                   3003 ;	C:\LITEC\Lab4\Lab4.c:299: if (rWait >= 4) {
      0007A8 74 FC            [12] 3004 	mov	a,#0x100 - 0x04
      0007AA 25*24            [12] 3005 	add	a,_rWait
      0007AC 50 06            [24] 3006 	jnc	00102$
                           0007AE  3007 	C$Lab4.c$300$3$138 ==.
                                   3008 ;	C:\LITEC\Lab4\Lab4.c:300: getRange = 1; // 80ms flag
      0007AE 75*23 01         [24] 3009 	mov	_getRange,#0x01
                           0007B1  3010 	C$Lab4.c$301$3$138 ==.
                                   3011 ;	C:\LITEC\Lab4\Lab4.c:301: rWait = 0; // Reset counter
      0007B1 75*24 00         [24] 3012 	mov	_rWait,#0x00
      0007B4                       3013 00102$:
                           0007B4  3014 	C$Lab4.c$304$2$137 ==.
                                   3015 ;	C:\LITEC\Lab4\Lab4.c:304: if (interrupts >= 2) { //If two interrupts have occured
      0007B4 74 FE            [12] 3016 	mov	a,#0x100 - 0x02
      0007B6 25*10            [12] 3017 	add	a,_interrupts
      0007B8 50 06            [24] 3018 	jnc	00104$
                           0007BA  3019 	C$Lab4.c$305$3$139 ==.
                                   3020 ;	C:\LITEC\Lab4\Lab4.c:305: interrupts = 0; //Reset interrupts
      0007BA 75*10 00         [24] 3021 	mov	_interrupts,#0x00
                           0007BD  3022 	C$Lab4.c$306$3$139 ==.
                                   3023 ;	C:\LITEC\Lab4\Lab4.c:306: take_heading = 1; //It is appropriate to take a reading
      0007BD 75*11 01         [24] 3024 	mov	_take_heading,#0x01
      0007C0                       3025 00104$:
                           0007C0  3026 	C$Lab4.c$308$2$137 ==.
                                   3027 ;	C:\LITEC\Lab4\Lab4.c:308: CF = 0; //Clear Interrupt Flag
      0007C0 C2 DF            [12] 3028 	clr	_CF
                           0007C2  3029 	C$Lab4.c$309$2$137 ==.
                                   3030 ;	C:\LITEC\Lab4\Lab4.c:309: PCA0 = 28672; //Jump timer ahead for given period
      0007C2 75 E9 00         [24] 3031 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      0007C5 75 F9 70         [24] 3032 	mov	((_PCA0 >> 8) & 0xFF),#0x70
      0007C8                       3033 00106$:
                           0007C8  3034 	C$Lab4.c$311$1$136 ==.
                                   3035 ;	C:\LITEC\Lab4\Lab4.c:311: PCA0CN &= 0xC0; // Handle other PCA interrupts
      0007C8 53 D8 C0         [24] 3036 	anl	_PCA0CN,#0xC0
      0007CB D0 D0            [24] 3037 	pop	psw
      0007CD D0 E0            [24] 3038 	pop	acc
                           0007CF  3039 	C$Lab4.c$312$1$136 ==.
                           0007CF  3040 	XG$PCA_ISR$0$0 ==.
      0007CF 32               [24] 3041 	reti
                                   3042 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   3043 ;	eliminated unneeded push/pop dpl
                                   3044 ;	eliminated unneeded push/pop dph
                                   3045 ;	eliminated unneeded push/pop b
                                   3046 ;------------------------------------------------------------
                                   3047 ;Allocation info for local variables in function 'Steering_Servo'
                                   3048 ;------------------------------------------------------------
                                   3049 ;current_heading           Allocated to registers r6 r7 
                                   3050 ;error                     Allocated to registers r6 r7 
                                   3051 ;------------------------------------------------------------
                           0007D0  3052 	G$Steering_Servo$0$0 ==.
                           0007D0  3053 	C$Lab4.c$319$1$136 ==.
                                   3054 ;	C:\LITEC\Lab4\Lab4.c:319: void Steering_Servo(unsigned int current_heading) {
                                   3055 ;	-----------------------------------------
                                   3056 ;	 function Steering_Servo
                                   3057 ;	-----------------------------------------
      0007D0                       3058 _Steering_Servo:
      0007D0 AE 82            [24] 3059 	mov	r6,dpl
      0007D2 AF 83            [24] 3060 	mov	r7,dph
                           0007D4  3061 	C$Lab4.c$322$1$141 ==.
                                   3062 ;	C:\LITEC\Lab4\Lab4.c:322: error = heading - current_heading; // Calculate signed error
      0007D4 E5*1C            [12] 3063 	mov	a,_heading
      0007D6 C3               [12] 3064 	clr	c
      0007D7 9E               [12] 3065 	subb	a,r6
      0007D8 FE               [12] 3066 	mov	r6,a
      0007D9 E5*1D            [12] 3067 	mov	a,(_heading + 1)
      0007DB 9F               [12] 3068 	subb	a,r7
      0007DC FF               [12] 3069 	mov	r7,a
                           0007DD  3070 	C$Lab4.c$323$1$141 ==.
                                   3071 ;	C:\LITEC\Lab4\Lab4.c:323: if (error > 1800) { // If the error is greater than 1800
      0007DD C3               [12] 3072 	clr	c
      0007DE 74 08            [12] 3073 	mov	a,#0x08
      0007E0 9E               [12] 3074 	subb	a,r6
      0007E1 74 87            [12] 3075 	mov	a,#(0x07 ^ 0x80)
      0007E3 8F F0            [24] 3076 	mov	b,r7
      0007E5 63 F0 80         [24] 3077 	xrl	b,#0x80
      0007E8 95 F0            [12] 3078 	subb	a,b
      0007EA 50 17            [24] 3079 	jnc	00104$
                           0007EC  3080 	C$Lab4.c$324$1$141 ==.
                                   3081 ;	C:\LITEC\Lab4\Lab4.c:324: error = 3600 % error; // or less than -1800, then the 
      0007EC 8E*00            [24] 3082 	mov	__modsint_PARM_2,r6
      0007EE 8F*01            [24] 3083 	mov	(__modsint_PARM_2 + 1),r7
      0007F0 90 0E 10         [24] 3084 	mov	dptr,#0x0E10
      0007F3 12r00r00         [24] 3085 	lcall	__modsint
      0007F6 AE 82            [24] 3086 	mov	r6,dpl
      0007F8 AF 83            [24] 3087 	mov	r7,dph
                           0007FA  3088 	C$Lab4.c$325$2$142 ==.
                                   3089 ;	C:\LITEC\Lab4\Lab4.c:325: error *= -1; // conjugate angle needs to be generated
      0007FA C3               [12] 3090 	clr	c
      0007FB E4               [12] 3091 	clr	a
      0007FC 9E               [12] 3092 	subb	a,r6
      0007FD FE               [12] 3093 	mov	r6,a
      0007FE E4               [12] 3094 	clr	a
      0007FF 9F               [12] 3095 	subb	a,r7
      000800 FF               [12] 3096 	mov	r7,a
      000801 80 22            [24] 3097 	sjmp	00105$
      000803                       3098 00104$:
                           000803  3099 	C$Lab4.c$326$1$141 ==.
                                   3100 ;	C:\LITEC\Lab4\Lab4.c:326: } else if (error < -1800) { // with opposite sign from the original
      000803 C3               [12] 3101 	clr	c
      000804 EE               [12] 3102 	mov	a,r6
      000805 94 F8            [12] 3103 	subb	a,#0xF8
      000807 EF               [12] 3104 	mov	a,r7
      000808 64 80            [12] 3105 	xrl	a,#0x80
      00080A 94 78            [12] 3106 	subb	a,#0x78
      00080C 50 17            [24] 3107 	jnc	00105$
                           00080E  3108 	C$Lab4.c$327$2$143 ==.
                                   3109 ;	C:\LITEC\Lab4\Lab4.c:327: error = 3600 % abs(error); // error
      00080E 8E 82            [24] 3110 	mov	dpl,r6
      000810 8F 83            [24] 3111 	mov	dph,r7
      000812 12r00r00         [24] 3112 	lcall	_abs
      000815 85 82*00         [24] 3113 	mov	__modsint_PARM_2,dpl
      000818 85 83*01         [24] 3114 	mov	(__modsint_PARM_2 + 1),dph
      00081B 90 0E 10         [24] 3115 	mov	dptr,#0x0E10
      00081E 12r00r00         [24] 3116 	lcall	__modsint
      000821 AE 82            [24] 3117 	mov	r6,dpl
      000823 AF 83            [24] 3118 	mov	r7,dph
      000825                       3119 00105$:
                           000825  3120 	C$Lab4.c$329$1$141 ==.
                                   3121 ;	C:\LITEC\Lab4\Lab4.c:329: printf("\t%d\n\r", error); // Commented out unless testing
      000825 C0 06            [24] 3122 	push	ar6
      000827 C0 07            [24] 3123 	push	ar7
      000829 74rA4            [12] 3124 	mov	a,#___str_10
      00082B C0 E0            [24] 3125 	push	acc
      00082D 74s00            [12] 3126 	mov	a,#(___str_10 >> 8)
      00082F C0 E0            [24] 3127 	push	acc
      000831 74 80            [12] 3128 	mov	a,#0x80
      000833 C0 E0            [24] 3129 	push	acc
      000835 12r00r00         [24] 3130 	lcall	_printf
      000838 E5 81            [12] 3131 	mov	a,sp
      00083A 24 FB            [12] 3132 	add	a,#0xfb
      00083C F5 81            [12] 3133 	mov	sp,a
                           00083E  3134 	C$Lab4.c$330$1$141 ==.
                                   3135 ;	C:\LITEC\Lab4\Lab4.c:330: servo_PW = PROPORTION * servo_PW_CENTER; // Update PW based on error
      00083E 85*14 82         [24] 3136 	mov	dpl,_servo_PW_CENTER
      000841 85*15 83         [24] 3137 	mov	dph,(_servo_PW_CENTER + 1)
      000844 12r00r00         [24] 3138 	lcall	___uint2fs
      000847 AC 82            [24] 3139 	mov	r4,dpl
      000849 AD 83            [24] 3140 	mov	r5,dph
      00084B AE F0            [24] 3141 	mov	r6,b
      00084D FF               [12] 3142 	mov	r7,a
      00084E C0 04            [24] 3143 	push	ar4
      000850 C0 05            [24] 3144 	push	ar5
      000852 C0 06            [24] 3145 	push	ar6
      000854 C0 07            [24] 3146 	push	ar7
      000856 90 81 06         [24] 3147 	mov	dptr,#0x8106
      000859 75 F0 D5         [24] 3148 	mov	b,#0xD5
      00085C 74 3E            [12] 3149 	mov	a,#0x3E
      00085E 12r00r00         [24] 3150 	lcall	___fsmul
      000861 AC 82            [24] 3151 	mov	r4,dpl
      000863 AD 83            [24] 3152 	mov	r5,dph
      000865 AE F0            [24] 3153 	mov	r6,b
      000867 FF               [12] 3154 	mov	r7,a
      000868 E5 81            [12] 3155 	mov	a,sp
      00086A 24 FC            [12] 3156 	add	a,#0xfc
      00086C F5 81            [12] 3157 	mov	sp,a
      00086E 8C 82            [24] 3158 	mov	dpl,r4
      000870 8D 83            [24] 3159 	mov	dph,r5
      000872 8E F0            [24] 3160 	mov	b,r6
      000874 EF               [12] 3161 	mov	a,r7
      000875 12r00r00         [24] 3162 	lcall	___fs2uint
      000878 85 82*1A         [24] 3163 	mov	_servo_PW,dpl
      00087B 85 83*1B         [24] 3164 	mov	(_servo_PW + 1),dph
                           00087E  3165 	C$Lab4.c$332$1$141 ==.
                                   3166 ;	C:\LITEC\Lab4\Lab4.c:332: if (servo_PW > MOTOR_PW_MAX) { // check if pulsewidth maximum exceeded
      00087E C3               [12] 3167 	clr	c
      00087F 74 AC            [12] 3168 	mov	a,#0xAC
      000881 95*1A            [12] 3169 	subb	a,_servo_PW
      000883 74 0D            [12] 3170 	mov	a,#0x0D
      000885 95*1B            [12] 3171 	subb	a,(_servo_PW + 1)
      000887 50 08            [24] 3172 	jnc	00109$
                           000889  3173 	C$Lab4.c$333$2$144 ==.
                                   3174 ;	C:\LITEC\Lab4\Lab4.c:333: servo_PW = MOTOR_PW_MAX; // set PW to a maximum value
      000889 75*1A AC         [24] 3175 	mov	_servo_PW,#0xAC
      00088C 75*1B 0D         [24] 3176 	mov	(_servo_PW + 1),#0x0D
      00088F 80 11            [24] 3177 	sjmp	00111$
      000891                       3178 00109$:
                           000891  3179 	C$Lab4.c$334$1$141 ==.
                                   3180 ;	C:\LITEC\Lab4\Lab4.c:334: } else if (servo_PW < servo_PW_MIN) { // check if less than pulsewidth minimum
      000891 C3               [12] 3181 	clr	c
      000892 E5*1A            [12] 3182 	mov	a,_servo_PW
      000894 95*16            [12] 3183 	subb	a,_servo_PW_MIN
      000896 E5*1B            [12] 3184 	mov	a,(_servo_PW + 1)
      000898 95*17            [12] 3185 	subb	a,(_servo_PW_MIN + 1)
      00089A 50 06            [24] 3186 	jnc	00111$
                           00089C  3187 	C$Lab4.c$335$2$145 ==.
                                   3188 ;	C:\LITEC\Lab4\Lab4.c:335: servo_PW = servo_PW_MIN; // set SERVO_PW to a minimum value
      00089C 85*16*1A         [24] 3189 	mov	_servo_PW,_servo_PW_MIN
      00089F 85*17*1B         [24] 3190 	mov	(_servo_PW + 1),(_servo_PW_MIN + 1)
      0008A2                       3191 00111$:
                           0008A2  3192 	C$Lab4.c$337$1$141 ==.
                           0008A2  3193 	XG$Steering_Servo$0$0 ==.
      0008A2 22               [24] 3194 	ret
                                   3195 	.area CSEG    (CODE)
                                   3196 	.area CONST   (CODE)
                           000000  3197 FLab4$__str_0$0$0 == .
      000000                       3198 ___str_0:
      000000 0A                    3199 	.db 0x0A
      000001 54 79 70 65 20 64 69  3200 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3201 	.db 0x00
                           000016  3202 FLab4$__str_1$0$0 == .
      000016                       3203 ___str_1:
      000016 20 20 20 20 20 25 63  3204 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3205 	.db 0x00
                           000026  3206 FLab4$__str_2$0$0 == .
      000026                       3207 ___str_2:
      000026 25 63                 3208 	.ascii "%c"
      000028 00                    3209 	.db 0x00
                           000029  3210 FLab4$__str_3$0$0 == .
      000029                       3211 ___str_3:
      000029 53 74 61 72 74 69 6E  3212 	.ascii "Starting"
             67
      000031 0A                    3213 	.db 0x0A
      000032 0D                    3214 	.db 0x0D
      000033 00                    3215 	.db 0x00
                           000034  3216 FLab4$__str_4$0$0 == .
      000034                       3217 ___str_4:
      000034 45 6D 62 65 64 64 65  3218 	.ascii "Embedded Control Drive Motor Control"
             64 20 43 6F 6E 74 72
             6F 6C 20 44 72 69 76
             65 20 4D 6F 74 6F 72
             20 43 6F 6E 74 72 6F
             6C
      000058 0D                    3219 	.db 0x0D
      000059 0A                    3220 	.db 0x0A
      00005A 00                    3221 	.db 0x00
                           00005B  3222 FLab4$__str_5$0$0 == .
      00005B                       3223 ___str_5:
      00005B 50 75 6C 73 65 20 57  3224 	.ascii "Pulse Width = %d"
             69 64 74 68 20 3D 20
             25 64
      00006B 0D                    3225 	.db 0x0D
      00006C 0A                    3226 	.db 0x0A
      00006D 00                    3227 	.db 0x00
                           00006E  3228 FLab4$__str_6$0$0 == .
      00006E                       3229 ___str_6:
      00006E 65 6E 64 20 77 61 69  3230 	.ascii "end wait "
             74 20
      000077 0D                    3231 	.db 0x0D
      000078 0A                    3232 	.db 0x0A
      000079 00                    3233 	.db 0x00
                           00007A  3234 FLab4$__str_7$0$0 == .
      00007A                       3235 ___str_7:
      00007A 25 64                 3236 	.ascii "%d"
      00007C 0A                    3237 	.db 0x0A
      00007D 0D                    3238 	.db 0x0D
      00007E 00                    3239 	.db 0x00
                           00007F  3240 FLab4$__str_8$0$0 == .
      00007F                       3241 ___str_8:
      00007F 52 61 6E 67 65 3A     3242 	.ascii "Range:"
      000085 09                    3243 	.db 0x09
      000086 09                    3244 	.db 0x09
      000087 09                    3245 	.db 0x09
      000088 25 64 20 63 6D 20     3246 	.ascii "%d cm "
      00008E 0D                    3247 	.db 0x0D
      00008F 0A                    3248 	.db 0x0A
      000090 00                    3249 	.db 0x00
                           000091  3250 FLab4$__str_9$0$0 == .
      000091                       3251 ___str_9:
      000091 50 75 6C 73 65 20 57  3252 	.ascii "Pulse Width:"
             69 64 74 68 3A
      00009D 09                    3253 	.db 0x09
      00009E 25 64 20              3254 	.ascii "%d "
      0000A1 0D                    3255 	.db 0x0D
      0000A2 0A                    3256 	.db 0x0A
      0000A3 00                    3257 	.db 0x00
                           0000A4  3258 FLab4$__str_10$0$0 == .
      0000A4                       3259 ___str_10:
      0000A4 09                    3260 	.db 0x09
      0000A5 25 64                 3261 	.ascii "%d"
      0000A7 0A                    3262 	.db 0x0A
      0000A8 0D                    3263 	.db 0x0D
      0000A9 00                    3264 	.db 0x00
                                   3265 	.area XINIT   (CODE)
                                   3266 	.area CABS    (ABS,CODE)
